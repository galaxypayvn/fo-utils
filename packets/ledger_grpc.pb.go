// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: ledger.proto

package packets

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LedgerClient is the client API for Ledger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LedgerClient interface {
	CreateJournal(ctx context.Context, in *JournalCreateRequest, opts ...grpc.CallOption) (*PInsertResponse, error)
	JournalAggregateByAccount(ctx context.Context, in *JournalAggregateRequest, opts ...grpc.CallOption) (*JournalAggregateResponse, error)
	JournalAggregateByMaster(ctx context.Context, in *JournalAggregateRequest, opts ...grpc.CallOption) (*JournalAggregateResponse, error)
}

type ledgerClient struct {
	cc grpc.ClientConnInterface
}

func NewLedgerClient(cc grpc.ClientConnInterface) LedgerClient {
	return &ledgerClient{cc}
}

func (c *ledgerClient) CreateJournal(ctx context.Context, in *JournalCreateRequest, opts ...grpc.CallOption) (*PInsertResponse, error) {
	out := new(PInsertResponse)
	err := c.cc.Invoke(ctx, "/packets.Ledger/CreateJournal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerClient) JournalAggregateByAccount(ctx context.Context, in *JournalAggregateRequest, opts ...grpc.CallOption) (*JournalAggregateResponse, error) {
	out := new(JournalAggregateResponse)
	err := c.cc.Invoke(ctx, "/packets.Ledger/JournalAggregateByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerClient) JournalAggregateByMaster(ctx context.Context, in *JournalAggregateRequest, opts ...grpc.CallOption) (*JournalAggregateResponse, error) {
	out := new(JournalAggregateResponse)
	err := c.cc.Invoke(ctx, "/packets.Ledger/JournalAggregateByMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LedgerServer is the server API for Ledger service.
// All implementations should embed UnimplementedLedgerServer
// for forward compatibility
type LedgerServer interface {
	CreateJournal(context.Context, *JournalCreateRequest) (*PInsertResponse, error)
	JournalAggregateByAccount(context.Context, *JournalAggregateRequest) (*JournalAggregateResponse, error)
	JournalAggregateByMaster(context.Context, *JournalAggregateRequest) (*JournalAggregateResponse, error)
}

// UnimplementedLedgerServer should be embedded to have forward compatible implementations.
type UnimplementedLedgerServer struct {
}

func (UnimplementedLedgerServer) CreateJournal(context.Context, *JournalCreateRequest) (*PInsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJournal not implemented")
}
func (UnimplementedLedgerServer) JournalAggregateByAccount(context.Context, *JournalAggregateRequest) (*JournalAggregateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JournalAggregateByAccount not implemented")
}
func (UnimplementedLedgerServer) JournalAggregateByMaster(context.Context, *JournalAggregateRequest) (*JournalAggregateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JournalAggregateByMaster not implemented")
}

// UnsafeLedgerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LedgerServer will
// result in compilation errors.
type UnsafeLedgerServer interface {
	mustEmbedUnimplementedLedgerServer()
}

func RegisterLedgerServer(s grpc.ServiceRegistrar, srv LedgerServer) {
	s.RegisterService(&Ledger_ServiceDesc, srv)
}

func _Ledger_CreateJournal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JournalCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServer).CreateJournal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Ledger/CreateJournal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServer).CreateJournal(ctx, req.(*JournalCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ledger_JournalAggregateByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JournalAggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServer).JournalAggregateByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Ledger/JournalAggregateByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServer).JournalAggregateByAccount(ctx, req.(*JournalAggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ledger_JournalAggregateByMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JournalAggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServer).JournalAggregateByMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Ledger/JournalAggregateByMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServer).JournalAggregateByMaster(ctx, req.(*JournalAggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ledger_ServiceDesc is the grpc.ServiceDesc for Ledger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ledger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "packets.Ledger",
	HandlerType: (*LedgerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJournal",
			Handler:    _Ledger_CreateJournal_Handler,
		},
		{
			MethodName: "JournalAggregateByAccount",
			Handler:    _Ledger_JournalAggregateByAccount_Handler,
		},
		{
			MethodName: "JournalAggregateByMaster",
			Handler:    _Ledger_JournalAggregateByMaster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ledger.proto",
}
