// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: tenant.proto

package packets

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Tenant_TenantDetailInquiry_FullMethodName = "/packets.Tenant/TenantDetailInquiry"
	Tenant_UserVerification_FullMethodName    = "/packets.Tenant/UserVerification"
	Tenant_UserRegistration_FullMethodName    = "/packets.Tenant/UserRegistration"
	Tenant_ApplyScope_FullMethodName          = "/packets.Tenant/ApplyScope"
	Tenant_Authentication_FullMethodName      = "/packets.Tenant/Authentication"
	Tenant_RefreshToken_FullMethodName        = "/packets.Tenant/RefreshToken"
	Tenant_CheckClient_FullMethodName         = "/packets.Tenant/CheckClient"
	Tenant_InsertOtpMas_FullMethodName        = "/packets.Tenant/InsertOtpMas"
	Tenant_VerifyOtp_FullMethodName           = "/packets.Tenant/VerifyOtp"
	Tenant_ClientInquiry_FullMethodName       = "/packets.Tenant/ClientInquiry"
)

// TenantClient is the client API for Tenant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenantClient interface {
	TenantDetailInquiry(ctx context.Context, in *TenantDetailRequest, opts ...grpc.CallOption) (*TenantDetailResponse, error)
	UserVerification(ctx context.Context, in *UserVerifyRequest, opts ...grpc.CallOption) (*UserResponse, error)
	UserRegistration(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserResponse, error)
	ApplyScope(ctx context.Context, in *ApplyScopeRequest, opts ...grpc.CallOption) (*ApplyScopeResponse, error)
	Authentication(ctx context.Context, in *AuthenticationRequest, opts ...grpc.CallOption) (*AuthenticationResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*AuthenticationResponse, error)
	CheckClient(ctx context.Context, in *CheckClientRequest, opts ...grpc.CallOption) (*CheckClientResponse, error)
	InsertOtpMas(ctx context.Context, in *InsertOtpMasRequest, opts ...grpc.CallOption) (*InsertOtpMasResponse, error)
	VerifyOtp(ctx context.Context, in *VerifyTOtpRequest, opts ...grpc.CallOption) (*VerifyTOtpResponse, error)
	ClientInquiry(ctx context.Context, in *ClientInquiryRequest, opts ...grpc.CallOption) (*ClientInquiryResponse, error)
}

type tenantClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantClient(cc grpc.ClientConnInterface) TenantClient {
	return &tenantClient{cc}
}

func (c *tenantClient) TenantDetailInquiry(ctx context.Context, in *TenantDetailRequest, opts ...grpc.CallOption) (*TenantDetailResponse, error) {
	out := new(TenantDetailResponse)
	err := c.cc.Invoke(ctx, Tenant_TenantDetailInquiry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) UserVerification(ctx context.Context, in *UserVerifyRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, Tenant_UserVerification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) UserRegistration(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, Tenant_UserRegistration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) ApplyScope(ctx context.Context, in *ApplyScopeRequest, opts ...grpc.CallOption) (*ApplyScopeResponse, error) {
	out := new(ApplyScopeResponse)
	err := c.cc.Invoke(ctx, Tenant_ApplyScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) Authentication(ctx context.Context, in *AuthenticationRequest, opts ...grpc.CallOption) (*AuthenticationResponse, error) {
	out := new(AuthenticationResponse)
	err := c.cc.Invoke(ctx, Tenant_Authentication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*AuthenticationResponse, error) {
	out := new(AuthenticationResponse)
	err := c.cc.Invoke(ctx, Tenant_RefreshToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) CheckClient(ctx context.Context, in *CheckClientRequest, opts ...grpc.CallOption) (*CheckClientResponse, error) {
	out := new(CheckClientResponse)
	err := c.cc.Invoke(ctx, Tenant_CheckClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) InsertOtpMas(ctx context.Context, in *InsertOtpMasRequest, opts ...grpc.CallOption) (*InsertOtpMasResponse, error) {
	out := new(InsertOtpMasResponse)
	err := c.cc.Invoke(ctx, Tenant_InsertOtpMas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) VerifyOtp(ctx context.Context, in *VerifyTOtpRequest, opts ...grpc.CallOption) (*VerifyTOtpResponse, error) {
	out := new(VerifyTOtpResponse)
	err := c.cc.Invoke(ctx, Tenant_VerifyOtp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantClient) ClientInquiry(ctx context.Context, in *ClientInquiryRequest, opts ...grpc.CallOption) (*ClientInquiryResponse, error) {
	out := new(ClientInquiryResponse)
	err := c.cc.Invoke(ctx, Tenant_ClientInquiry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantServer is the server API for Tenant service.
// All implementations should embed UnimplementedTenantServer
// for forward compatibility
type TenantServer interface {
	TenantDetailInquiry(context.Context, *TenantDetailRequest) (*TenantDetailResponse, error)
	UserVerification(context.Context, *UserVerifyRequest) (*UserResponse, error)
	UserRegistration(context.Context, *UserRegisterRequest) (*UserResponse, error)
	ApplyScope(context.Context, *ApplyScopeRequest) (*ApplyScopeResponse, error)
	Authentication(context.Context, *AuthenticationRequest) (*AuthenticationResponse, error)
	RefreshToken(context.Context, *RefreshTokenRequest) (*AuthenticationResponse, error)
	CheckClient(context.Context, *CheckClientRequest) (*CheckClientResponse, error)
	InsertOtpMas(context.Context, *InsertOtpMasRequest) (*InsertOtpMasResponse, error)
	VerifyOtp(context.Context, *VerifyTOtpRequest) (*VerifyTOtpResponse, error)
	ClientInquiry(context.Context, *ClientInquiryRequest) (*ClientInquiryResponse, error)
}

// UnimplementedTenantServer should be embedded to have forward compatible implementations.
type UnimplementedTenantServer struct {
}

func (UnimplementedTenantServer) TenantDetailInquiry(context.Context, *TenantDetailRequest) (*TenantDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TenantDetailInquiry not implemented")
}
func (UnimplementedTenantServer) UserVerification(context.Context, *UserVerifyRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserVerification not implemented")
}
func (UnimplementedTenantServer) UserRegistration(context.Context, *UserRegisterRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegistration not implemented")
}
func (UnimplementedTenantServer) ApplyScope(context.Context, *ApplyScopeRequest) (*ApplyScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyScope not implemented")
}
func (UnimplementedTenantServer) Authentication(context.Context, *AuthenticationRequest) (*AuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authentication not implemented")
}
func (UnimplementedTenantServer) RefreshToken(context.Context, *RefreshTokenRequest) (*AuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedTenantServer) CheckClient(context.Context, *CheckClientRequest) (*CheckClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckClient not implemented")
}
func (UnimplementedTenantServer) InsertOtpMas(context.Context, *InsertOtpMasRequest) (*InsertOtpMasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertOtpMas not implemented")
}
func (UnimplementedTenantServer) VerifyOtp(context.Context, *VerifyTOtpRequest) (*VerifyTOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyOtp not implemented")
}
func (UnimplementedTenantServer) ClientInquiry(context.Context, *ClientInquiryRequest) (*ClientInquiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientInquiry not implemented")
}

// UnsafeTenantServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantServer will
// result in compilation errors.
type UnsafeTenantServer interface {
	mustEmbedUnimplementedTenantServer()
}

func RegisterTenantServer(s grpc.ServiceRegistrar, srv TenantServer) {
	s.RegisterService(&Tenant_ServiceDesc, srv)
}

func _Tenant_TenantDetailInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).TenantDetailInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenant_TenantDetailInquiry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).TenantDetailInquiry(ctx, req.(*TenantDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_UserVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).UserVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenant_UserVerification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).UserVerification(ctx, req.(*UserVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_UserRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).UserRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenant_UserRegistration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).UserRegistration(ctx, req.(*UserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_ApplyScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).ApplyScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenant_ApplyScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).ApplyScope(ctx, req.(*ApplyScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_Authentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).Authentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenant_Authentication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).Authentication(ctx, req.(*AuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenant_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).RefreshToken(ctx, req.(*RefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_CheckClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).CheckClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenant_CheckClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).CheckClient(ctx, req.(*CheckClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_InsertOtpMas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertOtpMasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).InsertOtpMas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenant_InsertOtpMas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).InsertOtpMas(ctx, req.(*InsertOtpMasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_VerifyOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).VerifyOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenant_VerifyOtp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).VerifyOtp(ctx, req.(*VerifyTOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenant_ClientInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantServer).ClientInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tenant_ClientInquiry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantServer).ClientInquiry(ctx, req.(*ClientInquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tenant_ServiceDesc is the grpc.ServiceDesc for Tenant service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tenant_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "packets.Tenant",
	HandlerType: (*TenantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TenantDetailInquiry",
			Handler:    _Tenant_TenantDetailInquiry_Handler,
		},
		{
			MethodName: "UserVerification",
			Handler:    _Tenant_UserVerification_Handler,
		},
		{
			MethodName: "UserRegistration",
			Handler:    _Tenant_UserRegistration_Handler,
		},
		{
			MethodName: "ApplyScope",
			Handler:    _Tenant_ApplyScope_Handler,
		},
		{
			MethodName: "Authentication",
			Handler:    _Tenant_Authentication_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _Tenant_RefreshToken_Handler,
		},
		{
			MethodName: "CheckClient",
			Handler:    _Tenant_CheckClient_Handler,
		},
		{
			MethodName: "InsertOtpMas",
			Handler:    _Tenant_InsertOtpMas_Handler,
		},
		{
			MethodName: "VerifyOtp",
			Handler:    _Tenant_VerifyOtp_Handler,
		},
		{
			MethodName: "ClientInquiry",
			Handler:    _Tenant_ClientInquiry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tenant.proto",
}
