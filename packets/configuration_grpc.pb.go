// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: configuration.proto

package packets

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigurationClient is the client API for Configuration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigurationClient interface {
	BizListInquiry(ctx context.Context, in *BizListInquiryRequest, opts ...grpc.CallOption) (*BizListInquiryResponse, error)
	PendingPeriodRegister(ctx context.Context, in *PendingPeriodRegisterRequest, opts ...grpc.CallOption) (*PendingPeriodResponse, error)
	PendingPeriodInquiry(ctx context.Context, in *PendingPeriodInquiryRequest, opts ...grpc.CallOption) (*PendingPeriodResponse, error)
	HolidayCheck(ctx context.Context, in *HolidayCheckRequest, opts ...grpc.CallOption) (*HolidayCheckResponse, error)
	WorkingDateInquiry(ctx context.Context, in *WorkingDateInquiryRequest, opts ...grpc.CallOption) (*WorkingDateInquiryResponse, error)
	FeeRuleInquiry(ctx context.Context, in *FeeRuleInquiryRequest, opts ...grpc.CallOption) (*FeeRuleInquiryResponse, error)
}

type configurationClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigurationClient(cc grpc.ClientConnInterface) ConfigurationClient {
	return &configurationClient{cc}
}

func (c *configurationClient) BizListInquiry(ctx context.Context, in *BizListInquiryRequest, opts ...grpc.CallOption) (*BizListInquiryResponse, error) {
	out := new(BizListInquiryResponse)
	err := c.cc.Invoke(ctx, "/packets.Configuration/BizListInquiry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) PendingPeriodRegister(ctx context.Context, in *PendingPeriodRegisterRequest, opts ...grpc.CallOption) (*PendingPeriodResponse, error) {
	out := new(PendingPeriodResponse)
	err := c.cc.Invoke(ctx, "/packets.Configuration/PendingPeriodRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) PendingPeriodInquiry(ctx context.Context, in *PendingPeriodInquiryRequest, opts ...grpc.CallOption) (*PendingPeriodResponse, error) {
	out := new(PendingPeriodResponse)
	err := c.cc.Invoke(ctx, "/packets.Configuration/PendingPeriodInquiry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) HolidayCheck(ctx context.Context, in *HolidayCheckRequest, opts ...grpc.CallOption) (*HolidayCheckResponse, error) {
	out := new(HolidayCheckResponse)
	err := c.cc.Invoke(ctx, "/packets.Configuration/HolidayCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) WorkingDateInquiry(ctx context.Context, in *WorkingDateInquiryRequest, opts ...grpc.CallOption) (*WorkingDateInquiryResponse, error) {
	out := new(WorkingDateInquiryResponse)
	err := c.cc.Invoke(ctx, "/packets.Configuration/WorkingDateInquiry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configurationClient) FeeRuleInquiry(ctx context.Context, in *FeeRuleInquiryRequest, opts ...grpc.CallOption) (*FeeRuleInquiryResponse, error) {
	out := new(FeeRuleInquiryResponse)
	err := c.cc.Invoke(ctx, "/packets.Configuration/FeeRuleInquiry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigurationServer is the server API for Configuration service.
// All implementations should embed UnimplementedConfigurationServer
// for forward compatibility
type ConfigurationServer interface {
	BizListInquiry(context.Context, *BizListInquiryRequest) (*BizListInquiryResponse, error)
	PendingPeriodRegister(context.Context, *PendingPeriodRegisterRequest) (*PendingPeriodResponse, error)
	PendingPeriodInquiry(context.Context, *PendingPeriodInquiryRequest) (*PendingPeriodResponse, error)
	HolidayCheck(context.Context, *HolidayCheckRequest) (*HolidayCheckResponse, error)
	WorkingDateInquiry(context.Context, *WorkingDateInquiryRequest) (*WorkingDateInquiryResponse, error)
	FeeRuleInquiry(context.Context, *FeeRuleInquiryRequest) (*FeeRuleInquiryResponse, error)
}

// UnimplementedConfigurationServer should be embedded to have forward compatible implementations.
type UnimplementedConfigurationServer struct {
}

func (UnimplementedConfigurationServer) BizListInquiry(context.Context, *BizListInquiryRequest) (*BizListInquiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BizListInquiry not implemented")
}
func (UnimplementedConfigurationServer) PendingPeriodRegister(context.Context, *PendingPeriodRegisterRequest) (*PendingPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingPeriodRegister not implemented")
}
func (UnimplementedConfigurationServer) PendingPeriodInquiry(context.Context, *PendingPeriodInquiryRequest) (*PendingPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingPeriodInquiry not implemented")
}
func (UnimplementedConfigurationServer) HolidayCheck(context.Context, *HolidayCheckRequest) (*HolidayCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HolidayCheck not implemented")
}
func (UnimplementedConfigurationServer) WorkingDateInquiry(context.Context, *WorkingDateInquiryRequest) (*WorkingDateInquiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkingDateInquiry not implemented")
}
func (UnimplementedConfigurationServer) FeeRuleInquiry(context.Context, *FeeRuleInquiryRequest) (*FeeRuleInquiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeRuleInquiry not implemented")
}

// UnsafeConfigurationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigurationServer will
// result in compilation errors.
type UnsafeConfigurationServer interface {
	mustEmbedUnimplementedConfigurationServer()
}

func RegisterConfigurationServer(s grpc.ServiceRegistrar, srv ConfigurationServer) {
	s.RegisterService(&Configuration_ServiceDesc, srv)
}

func _Configuration_BizListInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BizListInquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).BizListInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Configuration/BizListInquiry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).BizListInquiry(ctx, req.(*BizListInquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_PendingPeriodRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PendingPeriodRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).PendingPeriodRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Configuration/PendingPeriodRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).PendingPeriodRegister(ctx, req.(*PendingPeriodRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_PendingPeriodInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PendingPeriodInquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).PendingPeriodInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Configuration/PendingPeriodInquiry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).PendingPeriodInquiry(ctx, req.(*PendingPeriodInquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_HolidayCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HolidayCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).HolidayCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Configuration/HolidayCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).HolidayCheck(ctx, req.(*HolidayCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_WorkingDateInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkingDateInquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).WorkingDateInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Configuration/WorkingDateInquiry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).WorkingDateInquiry(ctx, req.(*WorkingDateInquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configuration_FeeRuleInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeeRuleInquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigurationServer).FeeRuleInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Configuration/FeeRuleInquiry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigurationServer).FeeRuleInquiry(ctx, req.(*FeeRuleInquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Configuration_ServiceDesc is the grpc.ServiceDesc for Configuration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Configuration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "packets.Configuration",
	HandlerType: (*ConfigurationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BizListInquiry",
			Handler:    _Configuration_BizListInquiry_Handler,
		},
		{
			MethodName: "PendingPeriodRegister",
			Handler:    _Configuration_PendingPeriodRegister_Handler,
		},
		{
			MethodName: "PendingPeriodInquiry",
			Handler:    _Configuration_PendingPeriodInquiry_Handler,
		},
		{
			MethodName: "HolidayCheck",
			Handler:    _Configuration_HolidayCheck_Handler,
		},
		{
			MethodName: "WorkingDateInquiry",
			Handler:    _Configuration_WorkingDateInquiry_Handler,
		},
		{
			MethodName: "FeeRuleInquiry",
			Handler:    _Configuration_FeeRuleInquiry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "configuration.proto",
}
