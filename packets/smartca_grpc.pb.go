// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: smartca.proto

package packets

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SmartcaClient is the client API for Smartca service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SmartcaClient interface {
	AutoSigning(ctx context.Context, in *AutoSigningRequest, opts ...grpc.CallOption) (*SigningResponse, error)
	ManualSigning(ctx context.Context, in *ManualSigningRequest, opts ...grpc.CallOption) (*SigningResponse, error)
}

type smartcaClient struct {
	cc grpc.ClientConnInterface
}

func NewSmartcaClient(cc grpc.ClientConnInterface) SmartcaClient {
	return &smartcaClient{cc}
}

func (c *smartcaClient) AutoSigning(ctx context.Context, in *AutoSigningRequest, opts ...grpc.CallOption) (*SigningResponse, error) {
	out := new(SigningResponse)
	err := c.cc.Invoke(ctx, "/packets.Smartca/AutoSigning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smartcaClient) ManualSigning(ctx context.Context, in *ManualSigningRequest, opts ...grpc.CallOption) (*SigningResponse, error) {
	out := new(SigningResponse)
	err := c.cc.Invoke(ctx, "/packets.Smartca/ManualSigning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmartcaServer is the server API for Smartca service.
// All implementations should embed UnimplementedSmartcaServer
// for forward compatibility
type SmartcaServer interface {
	AutoSigning(context.Context, *AutoSigningRequest) (*SigningResponse, error)
	ManualSigning(context.Context, *ManualSigningRequest) (*SigningResponse, error)
}

// UnimplementedSmartcaServer should be embedded to have forward compatible implementations.
type UnimplementedSmartcaServer struct {
}

func (UnimplementedSmartcaServer) AutoSigning(context.Context, *AutoSigningRequest) (*SigningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoSigning not implemented")
}
func (UnimplementedSmartcaServer) ManualSigning(context.Context, *ManualSigningRequest) (*SigningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManualSigning not implemented")
}

// UnsafeSmartcaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SmartcaServer will
// result in compilation errors.
type UnsafeSmartcaServer interface {
	mustEmbedUnimplementedSmartcaServer()
}

func RegisterSmartcaServer(s grpc.ServiceRegistrar, srv SmartcaServer) {
	s.RegisterService(&Smartca_ServiceDesc, srv)
}

func _Smartca_AutoSigning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoSigningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartcaServer).AutoSigning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Smartca/AutoSigning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartcaServer).AutoSigning(ctx, req.(*AutoSigningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Smartca_ManualSigning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManualSigningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmartcaServer).ManualSigning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Smartca/ManualSigning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmartcaServer).ManualSigning(ctx, req.(*ManualSigningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Smartca_ServiceDesc is the grpc.ServiceDesc for Smartca service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Smartca_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "packets.Smartca",
	HandlerType: (*SmartcaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AutoSigning",
			Handler:    _Smartca_AutoSigning_Handler,
		},
		{
			MethodName: "ManualSigning",
			Handler:    _Smartca_ManualSigning_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "smartca.proto",
}
