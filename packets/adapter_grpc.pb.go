// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: adapter.proto

package packets

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdapterClient is the client API for Adapter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdapterClient interface {
	AccountRegistration(ctx context.Context, in *AccountRegisterRequest, opts ...grpc.CallOption) (*AccountRegisterResponse, error)
	AccountUpdate(ctx context.Context, in *AccountUpdateRequest, opts ...grpc.CallOption) (*AccountUpdateResponse, error)
	CashoutCreate(ctx context.Context, in *CashoutCreateRequest, opts ...grpc.CallOption) (*CashoutCreateResponse, error)
	CashoutInquiry(ctx context.Context, in *CashoutInquiryRequest, opts ...grpc.CallOption) (*CashoutInquiryResponse, error)
	BankAccountInquiry(ctx context.Context, in *BankAccountInquiryRequest, opts ...grpc.CallOption) (*BankAccountInquiryResponse, error)
	MerchantAccountInquiry(ctx context.Context, in *MerchantAccountInquiryRequest, opts ...grpc.CallOption) (*MerchantAccountInquiryResponse, error)
	QrCodeInquiry(ctx context.Context, in *QrCodeInquiryRequest, opts ...grpc.CallOption) (*QrCodeInquiryResponse, error)
}

type adapterClient struct {
	cc grpc.ClientConnInterface
}

func NewAdapterClient(cc grpc.ClientConnInterface) AdapterClient {
	return &adapterClient{cc}
}

func (c *adapterClient) AccountRegistration(ctx context.Context, in *AccountRegisterRequest, opts ...grpc.CallOption) (*AccountRegisterResponse, error) {
	out := new(AccountRegisterResponse)
	err := c.cc.Invoke(ctx, "/packets.Adapter/AccountRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterClient) AccountUpdate(ctx context.Context, in *AccountUpdateRequest, opts ...grpc.CallOption) (*AccountUpdateResponse, error) {
	out := new(AccountUpdateResponse)
	err := c.cc.Invoke(ctx, "/packets.Adapter/AccountUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterClient) CashoutCreate(ctx context.Context, in *CashoutCreateRequest, opts ...grpc.CallOption) (*CashoutCreateResponse, error) {
	out := new(CashoutCreateResponse)
	err := c.cc.Invoke(ctx, "/packets.Adapter/CashoutCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterClient) CashoutInquiry(ctx context.Context, in *CashoutInquiryRequest, opts ...grpc.CallOption) (*CashoutInquiryResponse, error) {
	out := new(CashoutInquiryResponse)
	err := c.cc.Invoke(ctx, "/packets.Adapter/CashoutInquiry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterClient) BankAccountInquiry(ctx context.Context, in *BankAccountInquiryRequest, opts ...grpc.CallOption) (*BankAccountInquiryResponse, error) {
	out := new(BankAccountInquiryResponse)
	err := c.cc.Invoke(ctx, "/packets.Adapter/BankAccountInquiry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterClient) MerchantAccountInquiry(ctx context.Context, in *MerchantAccountInquiryRequest, opts ...grpc.CallOption) (*MerchantAccountInquiryResponse, error) {
	out := new(MerchantAccountInquiryResponse)
	err := c.cc.Invoke(ctx, "/packets.Adapter/MerchantAccountInquiry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterClient) QrCodeInquiry(ctx context.Context, in *QrCodeInquiryRequest, opts ...grpc.CallOption) (*QrCodeInquiryResponse, error) {
	out := new(QrCodeInquiryResponse)
	err := c.cc.Invoke(ctx, "/packets.Adapter/QrCodeInquiry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdapterServer is the server API for Adapter service.
// All implementations should embed UnimplementedAdapterServer
// for forward compatibility
type AdapterServer interface {
	AccountRegistration(context.Context, *AccountRegisterRequest) (*AccountRegisterResponse, error)
	AccountUpdate(context.Context, *AccountUpdateRequest) (*AccountUpdateResponse, error)
	CashoutCreate(context.Context, *CashoutCreateRequest) (*CashoutCreateResponse, error)
	CashoutInquiry(context.Context, *CashoutInquiryRequest) (*CashoutInquiryResponse, error)
	BankAccountInquiry(context.Context, *BankAccountInquiryRequest) (*BankAccountInquiryResponse, error)
	MerchantAccountInquiry(context.Context, *MerchantAccountInquiryRequest) (*MerchantAccountInquiryResponse, error)
	QrCodeInquiry(context.Context, *QrCodeInquiryRequest) (*QrCodeInquiryResponse, error)
}

// UnimplementedAdapterServer should be embedded to have forward compatible implementations.
type UnimplementedAdapterServer struct {
}

func (UnimplementedAdapterServer) AccountRegistration(context.Context, *AccountRegisterRequest) (*AccountRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountRegistration not implemented")
}
func (UnimplementedAdapterServer) AccountUpdate(context.Context, *AccountUpdateRequest) (*AccountUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdate not implemented")
}
func (UnimplementedAdapterServer) CashoutCreate(context.Context, *CashoutCreateRequest) (*CashoutCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashoutCreate not implemented")
}
func (UnimplementedAdapterServer) CashoutInquiry(context.Context, *CashoutInquiryRequest) (*CashoutInquiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CashoutInquiry not implemented")
}
func (UnimplementedAdapterServer) BankAccountInquiry(context.Context, *BankAccountInquiryRequest) (*BankAccountInquiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BankAccountInquiry not implemented")
}
func (UnimplementedAdapterServer) MerchantAccountInquiry(context.Context, *MerchantAccountInquiryRequest) (*MerchantAccountInquiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MerchantAccountInquiry not implemented")
}
func (UnimplementedAdapterServer) QrCodeInquiry(context.Context, *QrCodeInquiryRequest) (*QrCodeInquiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QrCodeInquiry not implemented")
}

// UnsafeAdapterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdapterServer will
// result in compilation errors.
type UnsafeAdapterServer interface {
	mustEmbedUnimplementedAdapterServer()
}

func RegisterAdapterServer(s grpc.ServiceRegistrar, srv AdapterServer) {
	s.RegisterService(&Adapter_ServiceDesc, srv)
}

func _Adapter_AccountRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServer).AccountRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Adapter/AccountRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServer).AccountRegistration(ctx, req.(*AccountRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adapter_AccountUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServer).AccountUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Adapter/AccountUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServer).AccountUpdate(ctx, req.(*AccountUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adapter_CashoutCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CashoutCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServer).CashoutCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Adapter/CashoutCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServer).CashoutCreate(ctx, req.(*CashoutCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adapter_CashoutInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CashoutInquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServer).CashoutInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Adapter/CashoutInquiry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServer).CashoutInquiry(ctx, req.(*CashoutInquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adapter_BankAccountInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankAccountInquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServer).BankAccountInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Adapter/BankAccountInquiry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServer).BankAccountInquiry(ctx, req.(*BankAccountInquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adapter_MerchantAccountInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantAccountInquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServer).MerchantAccountInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Adapter/MerchantAccountInquiry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServer).MerchantAccountInquiry(ctx, req.(*MerchantAccountInquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adapter_QrCodeInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QrCodeInquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServer).QrCodeInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Adapter/QrCodeInquiry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServer).QrCodeInquiry(ctx, req.(*QrCodeInquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Adapter_ServiceDesc is the grpc.ServiceDesc for Adapter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Adapter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "packets.Adapter",
	HandlerType: (*AdapterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccountRegistration",
			Handler:    _Adapter_AccountRegistration_Handler,
		},
		{
			MethodName: "AccountUpdate",
			Handler:    _Adapter_AccountUpdate_Handler,
		},
		{
			MethodName: "CashoutCreate",
			Handler:    _Adapter_CashoutCreate_Handler,
		},
		{
			MethodName: "CashoutInquiry",
			Handler:    _Adapter_CashoutInquiry_Handler,
		},
		{
			MethodName: "BankAccountInquiry",
			Handler:    _Adapter_BankAccountInquiry_Handler,
		},
		{
			MethodName: "MerchantAccountInquiry",
			Handler:    _Adapter_MerchantAccountInquiry_Handler,
		},
		{
			MethodName: "QrCodeInquiry",
			Handler:    _Adapter_QrCodeInquiry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "adapter.proto",
}
