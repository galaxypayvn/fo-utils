// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: banking.proto

package packets

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VADetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantCode         string  `protobuf:"bytes,1,opt,name=TenantCode,proto3" json:"TenantCode,omitempty"`
	ClientId           string  `protobuf:"bytes,2,opt,name=ClientId,proto3" json:"ClientId,omitempty"`
	AccountNumber      string  `protobuf:"bytes,3,opt,name=AccountNumber,proto3" json:"AccountNumber,omitempty"`
	AccountType        string  `protobuf:"bytes,4,opt,name=AccountType,proto3" json:"AccountType,omitempty"`
	BankAccountNumber  string  `protobuf:"bytes,5,opt,name=BankAccountNumber,proto3" json:"BankAccountNumber,omitempty"`
	BankCode           string  `protobuf:"bytes,6,opt,name=BankCode,proto3" json:"BankCode,omitempty"`
	TransferringAmount float64 `protobuf:"fixed64,7,opt,name=TransferringAmount,proto3" json:"TransferringAmount,omitempty"`
}

func (x *VADetailRequest) Reset() {
	*x = VADetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VADetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VADetailRequest) ProtoMessage() {}

func (x *VADetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VADetailRequest.ProtoReflect.Descriptor instead.
func (*VADetailRequest) Descriptor() ([]byte, []int) {
	return file_banking_proto_rawDescGZIP(), []int{0}
}

func (x *VADetailRequest) GetTenantCode() string {
	if x != nil {
		return x.TenantCode
	}
	return ""
}

func (x *VADetailRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *VADetailRequest) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *VADetailRequest) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *VADetailRequest) GetBankAccountNumber() string {
	if x != nil {
		return x.BankAccountNumber
	}
	return ""
}

func (x *VADetailRequest) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

func (x *VADetailRequest) GetTransferringAmount() float64 {
	if x != nil {
		return x.TransferringAmount
	}
	return 0
}

type VABalanceUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantCode                      string                 `protobuf:"bytes,1,opt,name=TenantCode,proto3" json:"TenantCode,omitempty"`
	ClientId                        string                 `protobuf:"bytes,2,opt,name=ClientId,proto3" json:"ClientId,omitempty"`
	AccountNumber                   string                 `protobuf:"bytes,3,opt,name=AccountNumber,proto3" json:"AccountNumber,omitempty"`
	TransactionNumber               string                 `protobuf:"bytes,4,opt,name=TransactionNumber,proto3" json:"TransactionNumber,omitempty"`
	AdjustedFields                  []string               `protobuf:"bytes,5,rep,name=AdjustedFields,proto3" json:"AdjustedFields,omitempty"`
	AdjustedBalanceCurrentAmount    float64                `protobuf:"fixed64,6,opt,name=AdjustedBalanceCurrentAmount,proto3" json:"AdjustedBalanceCurrentAmount,omitempty"`
	AdjustedBalanceAvailableAmount  float64                `protobuf:"fixed64,7,opt,name=AdjustedBalanceAvailableAmount,proto3" json:"AdjustedBalanceAvailableAmount,omitempty"`
	AdjustedBalanceHoldingAmount    float64                `protobuf:"fixed64,8,opt,name=AdjustedBalanceHoldingAmount,proto3" json:"AdjustedBalanceHoldingAmount,omitempty"`
	IsResetCashInPerDayAmount       bool                   `protobuf:"varint,9,opt,name=IsResetCashInPerDayAmount,proto3" json:"IsResetCashInPerDayAmount,omitempty"`
	AdjustedCashInPerDayAmount      float64                `protobuf:"fixed64,10,opt,name=AdjustedCashInPerDayAmount,proto3" json:"AdjustedCashInPerDayAmount,omitempty"`
	CashInLastDate                  *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=CashInLastDate,proto3" json:"CashInLastDate,omitempty"`
	IsResetCashOutPerDayAmount      bool                   `protobuf:"varint,12,opt,name=IsResetCashOutPerDayAmount,proto3" json:"IsResetCashOutPerDayAmount,omitempty"`
	AdjustedCashOutPerDayAmount     float64                `protobuf:"fixed64,13,opt,name=AdjustedCashOutPerDayAmount,proto3" json:"AdjustedCashOutPerDayAmount,omitempty"`
	CashOutLastDate                 *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=CashOutLastDate,proto3" json:"CashOutLastDate,omitempty"`
	IsResetCashOutPerWeekAmount     bool                   `protobuf:"varint,15,opt,name=IsResetCashOutPerWeekAmount,proto3" json:"IsResetCashOutPerWeekAmount,omitempty"`
	AdjustedCashOutPerWeekAmount    float64                `protobuf:"fixed64,16,opt,name=AdjustedCashOutPerWeekAmount,proto3" json:"AdjustedCashOutPerWeekAmount,omitempty"`
	CashOutLastWeekDate             *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=CashOutLastWeekDate,proto3" json:"CashOutLastWeekDate,omitempty"`
	AdjustedBalancePendingAmount    float64                `protobuf:"fixed64,18,opt,name=AdjustedBalancePendingAmount,proto3" json:"AdjustedBalancePendingAmount,omitempty"`
	AdjustedBalanceCollectingAmount float64                `protobuf:"fixed64,19,opt,name=AdjustedBalanceCollectingAmount,proto3" json:"AdjustedBalanceCollectingAmount,omitempty"`
	TransactionAt                   *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=TransactionAt,proto3" json:"TransactionAt,omitempty"`
}

func (x *VABalanceUpdateRequest) Reset() {
	*x = VABalanceUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VABalanceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VABalanceUpdateRequest) ProtoMessage() {}

func (x *VABalanceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VABalanceUpdateRequest.ProtoReflect.Descriptor instead.
func (*VABalanceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_banking_proto_rawDescGZIP(), []int{1}
}

func (x *VABalanceUpdateRequest) GetTenantCode() string {
	if x != nil {
		return x.TenantCode
	}
	return ""
}

func (x *VABalanceUpdateRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *VABalanceUpdateRequest) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *VABalanceUpdateRequest) GetTransactionNumber() string {
	if x != nil {
		return x.TransactionNumber
	}
	return ""
}

func (x *VABalanceUpdateRequest) GetAdjustedFields() []string {
	if x != nil {
		return x.AdjustedFields
	}
	return nil
}

func (x *VABalanceUpdateRequest) GetAdjustedBalanceCurrentAmount() float64 {
	if x != nil {
		return x.AdjustedBalanceCurrentAmount
	}
	return 0
}

func (x *VABalanceUpdateRequest) GetAdjustedBalanceAvailableAmount() float64 {
	if x != nil {
		return x.AdjustedBalanceAvailableAmount
	}
	return 0
}

func (x *VABalanceUpdateRequest) GetAdjustedBalanceHoldingAmount() float64 {
	if x != nil {
		return x.AdjustedBalanceHoldingAmount
	}
	return 0
}

func (x *VABalanceUpdateRequest) GetIsResetCashInPerDayAmount() bool {
	if x != nil {
		return x.IsResetCashInPerDayAmount
	}
	return false
}

func (x *VABalanceUpdateRequest) GetAdjustedCashInPerDayAmount() float64 {
	if x != nil {
		return x.AdjustedCashInPerDayAmount
	}
	return 0
}

func (x *VABalanceUpdateRequest) GetCashInLastDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CashInLastDate
	}
	return nil
}

func (x *VABalanceUpdateRequest) GetIsResetCashOutPerDayAmount() bool {
	if x != nil {
		return x.IsResetCashOutPerDayAmount
	}
	return false
}

func (x *VABalanceUpdateRequest) GetAdjustedCashOutPerDayAmount() float64 {
	if x != nil {
		return x.AdjustedCashOutPerDayAmount
	}
	return 0
}

func (x *VABalanceUpdateRequest) GetCashOutLastDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CashOutLastDate
	}
	return nil
}

func (x *VABalanceUpdateRequest) GetIsResetCashOutPerWeekAmount() bool {
	if x != nil {
		return x.IsResetCashOutPerWeekAmount
	}
	return false
}

func (x *VABalanceUpdateRequest) GetAdjustedCashOutPerWeekAmount() float64 {
	if x != nil {
		return x.AdjustedCashOutPerWeekAmount
	}
	return 0
}

func (x *VABalanceUpdateRequest) GetCashOutLastWeekDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CashOutLastWeekDate
	}
	return nil
}

func (x *VABalanceUpdateRequest) GetAdjustedBalancePendingAmount() float64 {
	if x != nil {
		return x.AdjustedBalancePendingAmount
	}
	return 0
}

func (x *VABalanceUpdateRequest) GetAdjustedBalanceCollectingAmount() float64 {
	if x != nil {
		return x.AdjustedBalanceCollectingAmount
	}
	return 0
}

func (x *VABalanceUpdateRequest) GetTransactionAt() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactionAt
	}
	return nil
}

type VADetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                  *PStatus               `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	TenantCode              string                 `protobuf:"bytes,2,opt,name=TenantCode,proto3" json:"TenantCode,omitempty"`
	AccountNumber           string                 `protobuf:"bytes,3,opt,name=AccountNumber,proto3" json:"AccountNumber,omitempty"`
	AccountName             string                 `protobuf:"bytes,4,opt,name=AccountName,proto3" json:"AccountName,omitempty"`
	CurrencyCode            string                 `protobuf:"bytes,5,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"`
	AccountType             string                 `protobuf:"bytes,6,opt,name=AccountType,proto3" json:"AccountType,omitempty"`
	ParentAccountNumber     string                 `protobuf:"bytes,7,opt,name=ParentAccountNumber,proto3" json:"ParentAccountNumber,omitempty"`
	BankAccountNumber       string                 `protobuf:"bytes,8,opt,name=BankAccountNumber,proto3" json:"BankAccountNumber,omitempty"`
	BankCode                string                 `protobuf:"bytes,9,opt,name=BankCode,proto3" json:"BankCode,omitempty"`
	BlacklistCode           string                 `protobuf:"bytes,10,opt,name=BlacklistCode,proto3" json:"BlacklistCode,omitempty"`
	CifNumber               string                 `protobuf:"bytes,11,opt,name=CifNumber,proto3" json:"CifNumber,omitempty"`
	SmeNumber               string                 `protobuf:"bytes,12,opt,name=SmeNumber,proto3" json:"SmeNumber,omitempty"`
	MasterAccountNumber     string                 `protobuf:"bytes,13,opt,name=MasterAccountNumber,proto3" json:"MasterAccountNumber,omitempty"`
	BalanceCurrentAmount    float64                `protobuf:"fixed64,14,opt,name=BalanceCurrentAmount,proto3" json:"BalanceCurrentAmount,omitempty"`
	BalanceAvailableAmount  float64                `protobuf:"fixed64,15,opt,name=BalanceAvailableAmount,proto3" json:"BalanceAvailableAmount,omitempty"`
	BalanceHoldingAmount    float64                `protobuf:"fixed64,16,opt,name=BalanceHoldingAmount,proto3" json:"BalanceHoldingAmount,omitempty"`
	CashInPerDayAmount      float64                `protobuf:"fixed64,17,opt,name=CashInPerDayAmount,proto3" json:"CashInPerDayAmount,omitempty"`
	CashInLastDate          *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=CashInLastDate,proto3" json:"CashInLastDate,omitempty"`
	CashOutPerDayAmount     float64                `protobuf:"fixed64,19,opt,name=CashOutPerDayAmount,proto3" json:"CashOutPerDayAmount,omitempty"`
	CashOutLastDate         *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=CashOutLastDate,proto3" json:"CashOutLastDate,omitempty"`
	CashOutPerWeekAmount    float64                `protobuf:"fixed64,21,opt,name=CashOutPerWeekAmount,proto3" json:"CashOutPerWeekAmount,omitempty"`
	CashOutLastWeekDate     *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=CashOutLastWeekDate,proto3" json:"CashOutLastWeekDate,omitempty"`
	BalancePendingAmount    float64                `protobuf:"fixed64,23,opt,name=BalancePendingAmount,proto3" json:"BalancePendingAmount,omitempty"`
	PayRecvAccountNumber    string                 `protobuf:"bytes,24,opt,name=PayRecvAccountNumber,proto3" json:"PayRecvAccountNumber,omitempty"`
	UserId                  string                 `protobuf:"bytes,25,opt,name=UserId,proto3" json:"UserId,omitempty"`
	BusinessId              string                 `protobuf:"bytes,26,opt,name=BusinessId,proto3" json:"BusinessId,omitempty"`
	BalanceCollectingAmount float64                `protobuf:"fixed64,27,opt,name=BalanceCollectingAmount,proto3" json:"BalanceCollectingAmount,omitempty"`
}

func (x *VADetailResponse) Reset() {
	*x = VADetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VADetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VADetailResponse) ProtoMessage() {}

func (x *VADetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banking_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VADetailResponse.ProtoReflect.Descriptor instead.
func (*VADetailResponse) Descriptor() ([]byte, []int) {
	return file_banking_proto_rawDescGZIP(), []int{2}
}

func (x *VADetailResponse) GetStatus() *PStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *VADetailResponse) GetTenantCode() string {
	if x != nil {
		return x.TenantCode
	}
	return ""
}

func (x *VADetailResponse) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *VADetailResponse) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *VADetailResponse) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *VADetailResponse) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *VADetailResponse) GetParentAccountNumber() string {
	if x != nil {
		return x.ParentAccountNumber
	}
	return ""
}

func (x *VADetailResponse) GetBankAccountNumber() string {
	if x != nil {
		return x.BankAccountNumber
	}
	return ""
}

func (x *VADetailResponse) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

func (x *VADetailResponse) GetBlacklistCode() string {
	if x != nil {
		return x.BlacklistCode
	}
	return ""
}

func (x *VADetailResponse) GetCifNumber() string {
	if x != nil {
		return x.CifNumber
	}
	return ""
}

func (x *VADetailResponse) GetSmeNumber() string {
	if x != nil {
		return x.SmeNumber
	}
	return ""
}

func (x *VADetailResponse) GetMasterAccountNumber() string {
	if x != nil {
		return x.MasterAccountNumber
	}
	return ""
}

func (x *VADetailResponse) GetBalanceCurrentAmount() float64 {
	if x != nil {
		return x.BalanceCurrentAmount
	}
	return 0
}

func (x *VADetailResponse) GetBalanceAvailableAmount() float64 {
	if x != nil {
		return x.BalanceAvailableAmount
	}
	return 0
}

func (x *VADetailResponse) GetBalanceHoldingAmount() float64 {
	if x != nil {
		return x.BalanceHoldingAmount
	}
	return 0
}

func (x *VADetailResponse) GetCashInPerDayAmount() float64 {
	if x != nil {
		return x.CashInPerDayAmount
	}
	return 0
}

func (x *VADetailResponse) GetCashInLastDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CashInLastDate
	}
	return nil
}

func (x *VADetailResponse) GetCashOutPerDayAmount() float64 {
	if x != nil {
		return x.CashOutPerDayAmount
	}
	return 0
}

func (x *VADetailResponse) GetCashOutLastDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CashOutLastDate
	}
	return nil
}

func (x *VADetailResponse) GetCashOutPerWeekAmount() float64 {
	if x != nil {
		return x.CashOutPerWeekAmount
	}
	return 0
}

func (x *VADetailResponse) GetCashOutLastWeekDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CashOutLastWeekDate
	}
	return nil
}

func (x *VADetailResponse) GetBalancePendingAmount() float64 {
	if x != nil {
		return x.BalancePendingAmount
	}
	return 0
}

func (x *VADetailResponse) GetPayRecvAccountNumber() string {
	if x != nil {
		return x.PayRecvAccountNumber
	}
	return ""
}

func (x *VADetailResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *VADetailResponse) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

func (x *VADetailResponse) GetBalanceCollectingAmount() float64 {
	if x != nil {
		return x.BalanceCollectingAmount
	}
	return 0
}

type PayRecvAccountNotifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankTransactionNumber string                 `protobuf:"bytes,1,opt,name=BankTransactionNumber,proto3" json:"BankTransactionNumber,omitempty"`
	PayRecvAccountNumber  string                 `protobuf:"bytes,2,opt,name=PayRecvAccountNumber,proto3" json:"PayRecvAccountNumber,omitempty"`
	BankCode              string                 `protobuf:"bytes,3,opt,name=BankCode,proto3" json:"BankCode,omitempty"`
	CurrencyCode          string                 `protobuf:"bytes,4,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"`
	CurrentBalance        float64                `protobuf:"fixed64,5,opt,name=CurrentBalance,proto3" json:"CurrentBalance,omitempty"`
	TransactionAt         *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=TransactionAt,proto3" json:"TransactionAt,omitempty"`
}

func (x *PayRecvAccountNotifyRequest) Reset() {
	*x = PayRecvAccountNotifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayRecvAccountNotifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayRecvAccountNotifyRequest) ProtoMessage() {}

func (x *PayRecvAccountNotifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayRecvAccountNotifyRequest.ProtoReflect.Descriptor instead.
func (*PayRecvAccountNotifyRequest) Descriptor() ([]byte, []int) {
	return file_banking_proto_rawDescGZIP(), []int{3}
}

func (x *PayRecvAccountNotifyRequest) GetBankTransactionNumber() string {
	if x != nil {
		return x.BankTransactionNumber
	}
	return ""
}

func (x *PayRecvAccountNotifyRequest) GetPayRecvAccountNumber() string {
	if x != nil {
		return x.PayRecvAccountNumber
	}
	return ""
}

func (x *PayRecvAccountNotifyRequest) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

func (x *PayRecvAccountNotifyRequest) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *PayRecvAccountNotifyRequest) GetCurrentBalance() float64 {
	if x != nil {
		return x.CurrentBalance
	}
	return 0
}

func (x *PayRecvAccountNotifyRequest) GetTransactionAt() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactionAt
	}
	return nil
}

type PayRecvAccountNotifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            *PStatus `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	TransactionNumber string   `protobuf:"bytes,2,opt,name=TransactionNumber,proto3" json:"TransactionNumber,omitempty"`
}

func (x *PayRecvAccountNotifyResponse) Reset() {
	*x = PayRecvAccountNotifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayRecvAccountNotifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayRecvAccountNotifyResponse) ProtoMessage() {}

func (x *PayRecvAccountNotifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banking_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayRecvAccountNotifyResponse.ProtoReflect.Descriptor instead.
func (*PayRecvAccountNotifyResponse) Descriptor() ([]byte, []int) {
	return file_banking_proto_rawDescGZIP(), []int{4}
}

func (x *PayRecvAccountNotifyResponse) GetStatus() *PStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PayRecvAccountNotifyResponse) GetTransactionNumber() string {
	if x != nil {
		return x.TransactionNumber
	}
	return ""
}

type CifDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantCode     string `protobuf:"bytes,1,opt,name=TenantCode,proto3" json:"TenantCode,omitempty"`
	CifNumber      string `protobuf:"bytes,2,opt,name=CifNumber,proto3" json:"CifNumber,omitempty"`
	CifAccountName string `protobuf:"bytes,3,opt,name=CifAccountName,proto3" json:"CifAccountName,omitempty"`
}

func (x *CifDetailRequest) Reset() {
	*x = CifDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CifDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CifDetailRequest) ProtoMessage() {}

func (x *CifDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CifDetailRequest.ProtoReflect.Descriptor instead.
func (*CifDetailRequest) Descriptor() ([]byte, []int) {
	return file_banking_proto_rawDescGZIP(), []int{5}
}

func (x *CifDetailRequest) GetTenantCode() string {
	if x != nil {
		return x.TenantCode
	}
	return ""
}

func (x *CifDetailRequest) GetCifNumber() string {
	if x != nil {
		return x.CifNumber
	}
	return ""
}

func (x *CifDetailRequest) GetCifAccountName() string {
	if x != nil {
		return x.CifAccountName
	}
	return ""
}

type CifDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                      *PStatus               `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	TenantCode                  string                 `protobuf:"bytes,2,opt,name=TenantCode,proto3" json:"TenantCode,omitempty"`
	CifNumber                   string                 `protobuf:"bytes,3,opt,name=CifNumber,proto3" json:"CifNumber,omitempty"`
	CifIdCardNumber             string                 `protobuf:"bytes,4,opt,name=CifIdCardNumber,proto3" json:"CifIdCardNumber,omitempty"`
	CifPassportNumber           string                 `protobuf:"bytes,5,opt,name=CifPassportNumber,proto3" json:"CifPassportNumber,omitempty"`
	CifBodDate                  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=CifBodDate,proto3" json:"CifBodDate,omitempty"`
	CifLastName                 string                 `protobuf:"bytes,7,opt,name=CifLastName,proto3" json:"CifLastName,omitempty"`
	CifFirstName                string                 `protobuf:"bytes,8,opt,name=CifFirstName,proto3" json:"CifFirstName,omitempty"`
	CifAccountName              string                 `protobuf:"bytes,9,opt,name=CifAccountName,proto3" json:"CifAccountName,omitempty"`
	CifCurrentCityAddress       string                 `protobuf:"bytes,10,opt,name=CifCurrentCityAddress,proto3" json:"CifCurrentCityAddress,omitempty"`
	CifCurrentDistrictAddress   string                 `protobuf:"bytes,11,opt,name=CifCurrentDistrictAddress,proto3" json:"CifCurrentDistrictAddress,omitempty"`
	CifCurrentDetailAddress     string                 `protobuf:"bytes,12,opt,name=CifCurrentDetailAddress,proto3" json:"CifCurrentDetailAddress,omitempty"`
	CifPhoneNumber              string                 `protobuf:"bytes,13,opt,name=CifPhoneNumber,proto3" json:"CifPhoneNumber,omitempty"`
	CifEmail                    string                 `protobuf:"bytes,14,opt,name=CifEmail,proto3" json:"CifEmail,omitempty"`
	CifGender                   string                 `protobuf:"bytes,15,opt,name=CifGender,proto3" json:"CifGender,omitempty"`
	CifNationality              string                 `protobuf:"bytes,16,opt,name=CifNationality,proto3" json:"CifNationality,omitempty"`
	CifPermanentCityAddress     string                 `protobuf:"bytes,17,opt,name=CifPermanentCityAddress,proto3" json:"CifPermanentCityAddress,omitempty"`
	CifPermanentDistrictAddress string                 `protobuf:"bytes,18,opt,name=CifPermanentDistrictAddress,proto3" json:"CifPermanentDistrictAddress,omitempty"`
	CifPermanentDetailAddress   string                 `protobuf:"bytes,19,opt,name=CifPermanentDetailAddress,proto3" json:"CifPermanentDetailAddress,omitempty"`
	CifOriginalCityAddress      string                 `protobuf:"bytes,20,opt,name=CifOriginalCityAddress,proto3" json:"CifOriginalCityAddress,omitempty"`
	CifOriginalDistrictAddress  string                 `protobuf:"bytes,21,opt,name=CifOriginalDistrictAddress,proto3" json:"CifOriginalDistrictAddress,omitempty"`
	CifOriginalDetailAddress    string                 `protobuf:"bytes,22,opt,name=CifOriginalDetailAddress,proto3" json:"CifOriginalDetailAddress,omitempty"`
	CifIdentification           string                 `protobuf:"bytes,23,opt,name=CifIdentification,proto3" json:"CifIdentification,omitempty"`
	CifIdCardIssuingAddress     string                 `protobuf:"bytes,24,opt,name=CifIdCardIssuingAddress,proto3" json:"CifIdCardIssuingAddress,omitempty"`
	CifIdCardIssuingDate        *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=CifIdCardIssuingDate,proto3" json:"CifIdCardIssuingDate,omitempty"`
	CifIdCardExpiryDate         *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=CifIdCardExpiryDate,proto3" json:"CifIdCardExpiryDate,omitempty"`
	CifPassportIssuingAddress   string                 `protobuf:"bytes,27,opt,name=CifPassportIssuingAddress,proto3" json:"CifPassportIssuingAddress,omitempty"`
	CifPassportIssuingDate      *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=CifPassportIssuingDate,proto3" json:"CifPassportIssuingDate,omitempty"`
	CifPassportExpiryDate       *timestamppb.Timestamp `protobuf:"bytes,29,opt,name=CifPassportExpiryDate,proto3" json:"CifPassportExpiryDate,omitempty"`
	CifType                     string                 `protobuf:"bytes,30,opt,name=CifType,proto3" json:"CifType,omitempty"`
	CifKycNumber                int64                  `protobuf:"varint,31,opt,name=CifKycNumber,proto3" json:"CifKycNumber,omitempty"`
	CifLevel                    string                 `protobuf:"bytes,32,opt,name=CifLevel,proto3" json:"CifLevel,omitempty"`
	CifBlacklistCode            string                 `protobuf:"bytes,33,opt,name=CifBlacklistCode,proto3" json:"CifBlacklistCode,omitempty"`
}

func (x *CifDetailResponse) Reset() {
	*x = CifDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CifDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CifDetailResponse) ProtoMessage() {}

func (x *CifDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banking_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CifDetailResponse.ProtoReflect.Descriptor instead.
func (*CifDetailResponse) Descriptor() ([]byte, []int) {
	return file_banking_proto_rawDescGZIP(), []int{6}
}

func (x *CifDetailResponse) GetStatus() *PStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CifDetailResponse) GetTenantCode() string {
	if x != nil {
		return x.TenantCode
	}
	return ""
}

func (x *CifDetailResponse) GetCifNumber() string {
	if x != nil {
		return x.CifNumber
	}
	return ""
}

func (x *CifDetailResponse) GetCifIdCardNumber() string {
	if x != nil {
		return x.CifIdCardNumber
	}
	return ""
}

func (x *CifDetailResponse) GetCifPassportNumber() string {
	if x != nil {
		return x.CifPassportNumber
	}
	return ""
}

func (x *CifDetailResponse) GetCifBodDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CifBodDate
	}
	return nil
}

func (x *CifDetailResponse) GetCifLastName() string {
	if x != nil {
		return x.CifLastName
	}
	return ""
}

func (x *CifDetailResponse) GetCifFirstName() string {
	if x != nil {
		return x.CifFirstName
	}
	return ""
}

func (x *CifDetailResponse) GetCifAccountName() string {
	if x != nil {
		return x.CifAccountName
	}
	return ""
}

func (x *CifDetailResponse) GetCifCurrentCityAddress() string {
	if x != nil {
		return x.CifCurrentCityAddress
	}
	return ""
}

func (x *CifDetailResponse) GetCifCurrentDistrictAddress() string {
	if x != nil {
		return x.CifCurrentDistrictAddress
	}
	return ""
}

func (x *CifDetailResponse) GetCifCurrentDetailAddress() string {
	if x != nil {
		return x.CifCurrentDetailAddress
	}
	return ""
}

func (x *CifDetailResponse) GetCifPhoneNumber() string {
	if x != nil {
		return x.CifPhoneNumber
	}
	return ""
}

func (x *CifDetailResponse) GetCifEmail() string {
	if x != nil {
		return x.CifEmail
	}
	return ""
}

func (x *CifDetailResponse) GetCifGender() string {
	if x != nil {
		return x.CifGender
	}
	return ""
}

func (x *CifDetailResponse) GetCifNationality() string {
	if x != nil {
		return x.CifNationality
	}
	return ""
}

func (x *CifDetailResponse) GetCifPermanentCityAddress() string {
	if x != nil {
		return x.CifPermanentCityAddress
	}
	return ""
}

func (x *CifDetailResponse) GetCifPermanentDistrictAddress() string {
	if x != nil {
		return x.CifPermanentDistrictAddress
	}
	return ""
}

func (x *CifDetailResponse) GetCifPermanentDetailAddress() string {
	if x != nil {
		return x.CifPermanentDetailAddress
	}
	return ""
}

func (x *CifDetailResponse) GetCifOriginalCityAddress() string {
	if x != nil {
		return x.CifOriginalCityAddress
	}
	return ""
}

func (x *CifDetailResponse) GetCifOriginalDistrictAddress() string {
	if x != nil {
		return x.CifOriginalDistrictAddress
	}
	return ""
}

func (x *CifDetailResponse) GetCifOriginalDetailAddress() string {
	if x != nil {
		return x.CifOriginalDetailAddress
	}
	return ""
}

func (x *CifDetailResponse) GetCifIdentification() string {
	if x != nil {
		return x.CifIdentification
	}
	return ""
}

func (x *CifDetailResponse) GetCifIdCardIssuingAddress() string {
	if x != nil {
		return x.CifIdCardIssuingAddress
	}
	return ""
}

func (x *CifDetailResponse) GetCifIdCardIssuingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CifIdCardIssuingDate
	}
	return nil
}

func (x *CifDetailResponse) GetCifIdCardExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CifIdCardExpiryDate
	}
	return nil
}

func (x *CifDetailResponse) GetCifPassportIssuingAddress() string {
	if x != nil {
		return x.CifPassportIssuingAddress
	}
	return ""
}

func (x *CifDetailResponse) GetCifPassportIssuingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CifPassportIssuingDate
	}
	return nil
}

func (x *CifDetailResponse) GetCifPassportExpiryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CifPassportExpiryDate
	}
	return nil
}

func (x *CifDetailResponse) GetCifType() string {
	if x != nil {
		return x.CifType
	}
	return ""
}

func (x *CifDetailResponse) GetCifKycNumber() int64 {
	if x != nil {
		return x.CifKycNumber
	}
	return 0
}

func (x *CifDetailResponse) GetCifLevel() string {
	if x != nil {
		return x.CifLevel
	}
	return ""
}

func (x *CifDetailResponse) GetCifBlacklistCode() string {
	if x != nil {
		return x.CifBlacklistCode
	}
	return ""
}

type SmeCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId                  string `protobuf:"bytes,1,opt,name=ClientId,proto3" json:"ClientId,omitempty"`
	TenantCode                string `protobuf:"bytes,2,opt,name=TenantCode,proto3" json:"TenantCode,omitempty"`
	SmeOriginalName           string `protobuf:"bytes,3,opt,name=SmeOriginalName,proto3" json:"SmeOriginalName,omitempty"`
	SmeInternationalName      string `protobuf:"bytes,4,opt,name=SmeInternationalName,proto3" json:"SmeInternationalName,omitempty"`
	SmeTaxCode                string `protobuf:"bytes,5,opt,name=SmeTaxCode,proto3" json:"SmeTaxCode,omitempty"`
	SmeTaxProvider            string `protobuf:"bytes,6,opt,name=SmeTaxProvider,proto3" json:"SmeTaxProvider,omitempty"`
	SmeEstablishedDate        string `protobuf:"bytes,7,opt,name=SmeEstablishedDate,proto3" json:"SmeEstablishedDate,omitempty"`
	SmeEmail                  string `protobuf:"bytes,8,opt,name=SmeEmail,proto3" json:"SmeEmail,omitempty"`
	SmePhoneNumber            string `protobuf:"bytes,9,opt,name=SmePhoneNumber,proto3" json:"SmePhoneNumber,omitempty"`
	SmeCurrentCityAddress     string `protobuf:"bytes,10,opt,name=SmeCurrentCityAddress,proto3" json:"SmeCurrentCityAddress,omitempty"`
	SmeCurrentDistrictAddress string `protobuf:"bytes,11,opt,name=SmeCurrentDistrictAddress,proto3" json:"SmeCurrentDistrictAddress,omitempty"`
	SmeCurrentDetailAddress   string `protobuf:"bytes,12,opt,name=SmeCurrentDetailAddress,proto3" json:"SmeCurrentDetailAddress,omitempty"`
	SmeAdditionalInformation  string `protobuf:"bytes,13,opt,name=SmeAdditionalInformation,proto3" json:"SmeAdditionalInformation,omitempty"`
	CifNumber                 string `protobuf:"bytes,14,opt,name=CifNumber,proto3" json:"CifNumber,omitempty"`
}

func (x *SmeCreateRequest) Reset() {
	*x = SmeCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmeCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmeCreateRequest) ProtoMessage() {}

func (x *SmeCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmeCreateRequest.ProtoReflect.Descriptor instead.
func (*SmeCreateRequest) Descriptor() ([]byte, []int) {
	return file_banking_proto_rawDescGZIP(), []int{7}
}

func (x *SmeCreateRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SmeCreateRequest) GetTenantCode() string {
	if x != nil {
		return x.TenantCode
	}
	return ""
}

func (x *SmeCreateRequest) GetSmeOriginalName() string {
	if x != nil {
		return x.SmeOriginalName
	}
	return ""
}

func (x *SmeCreateRequest) GetSmeInternationalName() string {
	if x != nil {
		return x.SmeInternationalName
	}
	return ""
}

func (x *SmeCreateRequest) GetSmeTaxCode() string {
	if x != nil {
		return x.SmeTaxCode
	}
	return ""
}

func (x *SmeCreateRequest) GetSmeTaxProvider() string {
	if x != nil {
		return x.SmeTaxProvider
	}
	return ""
}

func (x *SmeCreateRequest) GetSmeEstablishedDate() string {
	if x != nil {
		return x.SmeEstablishedDate
	}
	return ""
}

func (x *SmeCreateRequest) GetSmeEmail() string {
	if x != nil {
		return x.SmeEmail
	}
	return ""
}

func (x *SmeCreateRequest) GetSmePhoneNumber() string {
	if x != nil {
		return x.SmePhoneNumber
	}
	return ""
}

func (x *SmeCreateRequest) GetSmeCurrentCityAddress() string {
	if x != nil {
		return x.SmeCurrentCityAddress
	}
	return ""
}

func (x *SmeCreateRequest) GetSmeCurrentDistrictAddress() string {
	if x != nil {
		return x.SmeCurrentDistrictAddress
	}
	return ""
}

func (x *SmeCreateRequest) GetSmeCurrentDetailAddress() string {
	if x != nil {
		return x.SmeCurrentDetailAddress
	}
	return ""
}

func (x *SmeCreateRequest) GetSmeAdditionalInformation() string {
	if x != nil {
		return x.SmeAdditionalInformation
	}
	return ""
}

func (x *SmeCreateRequest) GetCifNumber() string {
	if x != nil {
		return x.CifNumber
	}
	return ""
}

type SmeDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantCode string `protobuf:"bytes,1,opt,name=TenantCode,proto3" json:"TenantCode,omitempty"`
	SmeNumber  string `protobuf:"bytes,2,opt,name=SmeNumber,proto3" json:"SmeNumber,omitempty"`
}

func (x *SmeDetailRequest) Reset() {
	*x = SmeDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmeDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmeDetailRequest) ProtoMessage() {}

func (x *SmeDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmeDetailRequest.ProtoReflect.Descriptor instead.
func (*SmeDetailRequest) Descriptor() ([]byte, []int) {
	return file_banking_proto_rawDescGZIP(), []int{8}
}

func (x *SmeDetailRequest) GetTenantCode() string {
	if x != nil {
		return x.TenantCode
	}
	return ""
}

func (x *SmeDetailRequest) GetSmeNumber() string {
	if x != nil {
		return x.SmeNumber
	}
	return ""
}

type SmeDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status                    *PStatus `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	TenantCode                string   `protobuf:"bytes,2,opt,name=TenantCode,proto3" json:"TenantCode,omitempty"`
	SmeNumber                 string   `protobuf:"bytes,3,opt,name=SmeNumber,proto3" json:"SmeNumber,omitempty"`
	SmeOriginalName           string   `protobuf:"bytes,4,opt,name=SmeOriginalName,proto3" json:"SmeOriginalName,omitempty"`
	SmeInternationalName      string   `protobuf:"bytes,5,opt,name=SmeInternationalName,proto3" json:"SmeInternationalName,omitempty"`
	SmeTaxCode                string   `protobuf:"bytes,6,opt,name=SmeTaxCode,proto3" json:"SmeTaxCode,omitempty"`
	SmeTaxProvider            string   `protobuf:"bytes,7,opt,name=SmeTaxProvider,proto3" json:"SmeTaxProvider,omitempty"`
	SmeEstablishedDate        string   `protobuf:"bytes,8,opt,name=SmeEstablishedDate,proto3" json:"SmeEstablishedDate,omitempty"`
	SmeEmail                  string   `protobuf:"bytes,9,opt,name=SmeEmail,proto3" json:"SmeEmail,omitempty"`
	SmePhoneNumber            string   `protobuf:"bytes,10,opt,name=SmePhoneNumber,proto3" json:"SmePhoneNumber,omitempty"`
	SmeCurrentCityAddress     string   `protobuf:"bytes,11,opt,name=SmeCurrentCityAddress,proto3" json:"SmeCurrentCityAddress,omitempty"`
	SmeCurrentDistrictAddress string   `protobuf:"bytes,12,opt,name=SmeCurrentDistrictAddress,proto3" json:"SmeCurrentDistrictAddress,omitempty"`
	SmeCurrentDetailAddress   string   `protobuf:"bytes,13,opt,name=SmeCurrentDetailAddress,proto3" json:"SmeCurrentDetailAddress,omitempty"`
	SmeAdditionalInformation  string   `protobuf:"bytes,14,opt,name=SmeAdditionalInformation,proto3" json:"SmeAdditionalInformation,omitempty"`
	SmeKycNumber              int64    `protobuf:"varint,15,opt,name=SmeKycNumber,proto3" json:"SmeKycNumber,omitempty"`
	SmeBlacklistCode          string   `protobuf:"bytes,16,opt,name=SmeBlacklistCode,proto3" json:"SmeBlacklistCode,omitempty"`
	CifNumber                 string   `protobuf:"bytes,17,opt,name=CifNumber,proto3" json:"CifNumber,omitempty"`
}

func (x *SmeDetailResponse) Reset() {
	*x = SmeDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmeDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmeDetailResponse) ProtoMessage() {}

func (x *SmeDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banking_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmeDetailResponse.ProtoReflect.Descriptor instead.
func (*SmeDetailResponse) Descriptor() ([]byte, []int) {
	return file_banking_proto_rawDescGZIP(), []int{9}
}

func (x *SmeDetailResponse) GetStatus() *PStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SmeDetailResponse) GetTenantCode() string {
	if x != nil {
		return x.TenantCode
	}
	return ""
}

func (x *SmeDetailResponse) GetSmeNumber() string {
	if x != nil {
		return x.SmeNumber
	}
	return ""
}

func (x *SmeDetailResponse) GetSmeOriginalName() string {
	if x != nil {
		return x.SmeOriginalName
	}
	return ""
}

func (x *SmeDetailResponse) GetSmeInternationalName() string {
	if x != nil {
		return x.SmeInternationalName
	}
	return ""
}

func (x *SmeDetailResponse) GetSmeTaxCode() string {
	if x != nil {
		return x.SmeTaxCode
	}
	return ""
}

func (x *SmeDetailResponse) GetSmeTaxProvider() string {
	if x != nil {
		return x.SmeTaxProvider
	}
	return ""
}

func (x *SmeDetailResponse) GetSmeEstablishedDate() string {
	if x != nil {
		return x.SmeEstablishedDate
	}
	return ""
}

func (x *SmeDetailResponse) GetSmeEmail() string {
	if x != nil {
		return x.SmeEmail
	}
	return ""
}

func (x *SmeDetailResponse) GetSmePhoneNumber() string {
	if x != nil {
		return x.SmePhoneNumber
	}
	return ""
}

func (x *SmeDetailResponse) GetSmeCurrentCityAddress() string {
	if x != nil {
		return x.SmeCurrentCityAddress
	}
	return ""
}

func (x *SmeDetailResponse) GetSmeCurrentDistrictAddress() string {
	if x != nil {
		return x.SmeCurrentDistrictAddress
	}
	return ""
}

func (x *SmeDetailResponse) GetSmeCurrentDetailAddress() string {
	if x != nil {
		return x.SmeCurrentDetailAddress
	}
	return ""
}

func (x *SmeDetailResponse) GetSmeAdditionalInformation() string {
	if x != nil {
		return x.SmeAdditionalInformation
	}
	return ""
}

func (x *SmeDetailResponse) GetSmeKycNumber() int64 {
	if x != nil {
		return x.SmeKycNumber
	}
	return 0
}

func (x *SmeDetailResponse) GetSmeBlacklistCode() string {
	if x != nil {
		return x.SmeBlacklistCode
	}
	return ""
}

func (x *SmeDetailResponse) GetCifNumber() string {
	if x != nil {
		return x.CifNumber
	}
	return ""
}

type VASingleUseRegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantCode           string  `protobuf:"bytes,1,opt,name=TenantCode,proto3" json:"TenantCode,omitempty"`
	ClientId             string  `protobuf:"bytes,2,opt,name=ClientId,proto3" json:"ClientId,omitempty"`
	UserId               string  `protobuf:"bytes,3,opt,name=UserId,proto3" json:"UserId,omitempty"`
	PaymentLinkId        int64   `protobuf:"varint,4,opt,name=PaymentLinkId,proto3" json:"PaymentLinkId,omitempty"`
	CurrencyCode         string  `protobuf:"bytes,5,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"`
	ExpiryDate           string  `protobuf:"bytes,6,opt,name=ExpiryDate,proto3" json:"ExpiryDate,omitempty"`
	ExpectingAmount      float64 `protobuf:"fixed64,7,opt,name=ExpectingAmount,proto3" json:"ExpectingAmount,omitempty"`
	LinkingAccountNumber string  `protobuf:"bytes,8,opt,name=LinkingAccountNumber,proto3" json:"LinkingAccountNumber,omitempty"`
	PaymentLinkNumber    string  `protobuf:"bytes,9,opt,name=PaymentLinkNumber,proto3" json:"PaymentLinkNumber,omitempty"`
	BusinessId           string  `protobuf:"bytes,10,opt,name=BusinessId,proto3" json:"BusinessId,omitempty"`
}

func (x *VASingleUseRegisterRequest) Reset() {
	*x = VASingleUseRegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VASingleUseRegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VASingleUseRegisterRequest) ProtoMessage() {}

func (x *VASingleUseRegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VASingleUseRegisterRequest.ProtoReflect.Descriptor instead.
func (*VASingleUseRegisterRequest) Descriptor() ([]byte, []int) {
	return file_banking_proto_rawDescGZIP(), []int{10}
}

func (x *VASingleUseRegisterRequest) GetTenantCode() string {
	if x != nil {
		return x.TenantCode
	}
	return ""
}

func (x *VASingleUseRegisterRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *VASingleUseRegisterRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *VASingleUseRegisterRequest) GetPaymentLinkId() int64 {
	if x != nil {
		return x.PaymentLinkId
	}
	return 0
}

func (x *VASingleUseRegisterRequest) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *VASingleUseRegisterRequest) GetExpiryDate() string {
	if x != nil {
		return x.ExpiryDate
	}
	return ""
}

func (x *VASingleUseRegisterRequest) GetExpectingAmount() float64 {
	if x != nil {
		return x.ExpectingAmount
	}
	return 0
}

func (x *VASingleUseRegisterRequest) GetLinkingAccountNumber() string {
	if x != nil {
		return x.LinkingAccountNumber
	}
	return ""
}

func (x *VASingleUseRegisterRequest) GetPaymentLinkNumber() string {
	if x != nil {
		return x.PaymentLinkNumber
	}
	return ""
}

func (x *VASingleUseRegisterRequest) GetBusinessId() string {
	if x != nil {
		return x.BusinessId
	}
	return ""
}

type VASingleUseUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantCode            string                 `protobuf:"bytes,1,opt,name=TenantCode,proto3" json:"TenantCode,omitempty"`
	ClientId              string                 `protobuf:"bytes,2,opt,name=ClientId,proto3" json:"ClientId,omitempty"`
	AccountNumber         string                 `protobuf:"bytes,3,opt,name=AccountNumber,proto3" json:"AccountNumber,omitempty"`
	TransactionNumber     string                 `protobuf:"bytes,4,opt,name=TransactionNumber,proto3" json:"TransactionNumber,omitempty"`
	AdjustedFields        []string               `protobuf:"bytes,5,rep,name=AdjustedFields,proto3" json:"AdjustedFields,omitempty"`
	PaymentLinkId         int64                  `protobuf:"varint,6,opt,name=PaymentLinkId,proto3" json:"PaymentLinkId,omitempty"`
	AdjustedCurrentAmount float64                `protobuf:"fixed64,7,opt,name=AdjustedCurrentAmount,proto3" json:"AdjustedCurrentAmount,omitempty"`
	IsActive              bool                   `protobuf:"varint,8,opt,name=IsActive,proto3" json:"IsActive,omitempty"`
	PaymentLinkNumber     string                 `protobuf:"bytes,9,opt,name=PaymentLinkNumber,proto3" json:"PaymentLinkNumber,omitempty"`
	TransactionAt         *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=TransactionAt,proto3" json:"TransactionAt,omitempty"`
}

func (x *VASingleUseUpdateRequest) Reset() {
	*x = VASingleUseUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VASingleUseUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VASingleUseUpdateRequest) ProtoMessage() {}

func (x *VASingleUseUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VASingleUseUpdateRequest.ProtoReflect.Descriptor instead.
func (*VASingleUseUpdateRequest) Descriptor() ([]byte, []int) {
	return file_banking_proto_rawDescGZIP(), []int{11}
}

func (x *VASingleUseUpdateRequest) GetTenantCode() string {
	if x != nil {
		return x.TenantCode
	}
	return ""
}

func (x *VASingleUseUpdateRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *VASingleUseUpdateRequest) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *VASingleUseUpdateRequest) GetTransactionNumber() string {
	if x != nil {
		return x.TransactionNumber
	}
	return ""
}

func (x *VASingleUseUpdateRequest) GetAdjustedFields() []string {
	if x != nil {
		return x.AdjustedFields
	}
	return nil
}

func (x *VASingleUseUpdateRequest) GetPaymentLinkId() int64 {
	if x != nil {
		return x.PaymentLinkId
	}
	return 0
}

func (x *VASingleUseUpdateRequest) GetAdjustedCurrentAmount() float64 {
	if x != nil {
		return x.AdjustedCurrentAmount
	}
	return 0
}

func (x *VASingleUseUpdateRequest) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *VASingleUseUpdateRequest) GetPaymentLinkNumber() string {
	if x != nil {
		return x.PaymentLinkNumber
	}
	return ""
}

func (x *VASingleUseUpdateRequest) GetTransactionAt() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactionAt
	}
	return nil
}

type VASingleUseInquiryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantCode        string `protobuf:"bytes,1,opt,name=TenantCode,proto3" json:"TenantCode,omitempty"`
	ClientId          string `protobuf:"bytes,2,opt,name=ClientId,proto3" json:"ClientId,omitempty"`
	AccountNumber     string `protobuf:"bytes,3,opt,name=AccountNumber,proto3" json:"AccountNumber,omitempty"`
	BankAccountNumber string `protobuf:"bytes,4,opt,name=BankAccountNumber,proto3" json:"BankAccountNumber,omitempty"`
	BankCode          string `protobuf:"bytes,5,opt,name=BankCode,proto3" json:"BankCode,omitempty"`
	IsActive          string `protobuf:"bytes,6,opt,name=IsActive,proto3" json:"IsActive,omitempty"`
}

func (x *VASingleUseInquiryRequest) Reset() {
	*x = VASingleUseInquiryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VASingleUseInquiryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VASingleUseInquiryRequest) ProtoMessage() {}

func (x *VASingleUseInquiryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banking_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VASingleUseInquiryRequest.ProtoReflect.Descriptor instead.
func (*VASingleUseInquiryRequest) Descriptor() ([]byte, []int) {
	return file_banking_proto_rawDescGZIP(), []int{12}
}

func (x *VASingleUseInquiryRequest) GetTenantCode() string {
	if x != nil {
		return x.TenantCode
	}
	return ""
}

func (x *VASingleUseInquiryRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *VASingleUseInquiryRequest) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *VASingleUseInquiryRequest) GetBankAccountNumber() string {
	if x != nil {
		return x.BankAccountNumber
	}
	return ""
}

func (x *VASingleUseInquiryRequest) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

func (x *VASingleUseInquiryRequest) GetIsActive() string {
	if x != nil {
		return x.IsActive
	}
	return ""
}

type VASingleUseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status               *PStatus `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	TenantCode           string   `protobuf:"bytes,2,opt,name=TenantCode,proto3" json:"TenantCode,omitempty"`
	AccountNumber        string   `protobuf:"bytes,3,opt,name=AccountNumber,proto3" json:"AccountNumber,omitempty"`
	AccountName          string   `protobuf:"bytes,4,opt,name=AccountName,proto3" json:"AccountName,omitempty"`
	LinkingAccountNumber string   `protobuf:"bytes,5,opt,name=LinkingAccountNumber,proto3" json:"LinkingAccountNumber,omitempty"`
	CurrencyCode         string   `protobuf:"bytes,6,opt,name=CurrencyCode,proto3" json:"CurrencyCode,omitempty"`
	AccountType          string   `protobuf:"bytes,7,opt,name=AccountType,proto3" json:"AccountType,omitempty"`
	CifNumber            string   `protobuf:"bytes,8,opt,name=CifNumber,proto3" json:"CifNumber,omitempty"`
	SmeNumber            string   `protobuf:"bytes,9,opt,name=SmeNumber,proto3" json:"SmeNumber,omitempty"`
	BankAccountNumber    string   `protobuf:"bytes,10,opt,name=BankAccountNumber,proto3" json:"BankAccountNumber,omitempty"`
	BankCode             string   `protobuf:"bytes,11,opt,name=BankCode,proto3" json:"BankCode,omitempty"`
	PaymentLinkId        int64    `protobuf:"varint,12,opt,name=PaymentLinkId,proto3" json:"PaymentLinkId,omitempty"`
	MasterAccountNumber  string   `protobuf:"bytes,13,opt,name=MasterAccountNumber,proto3" json:"MasterAccountNumber,omitempty"`
	ExpiryDate           string   `protobuf:"bytes,14,opt,name=ExpiryDate,proto3" json:"ExpiryDate,omitempty"`
	IsActive             bool     `protobuf:"varint,15,opt,name=IsActive,proto3" json:"IsActive,omitempty"`
	ExpectingAmount      float64  `protobuf:"fixed64,16,opt,name=ExpectingAmount,proto3" json:"ExpectingAmount,omitempty"`
	AccumulatedAmount    float64  `protobuf:"fixed64,17,opt,name=AccumulatedAmount,proto3" json:"AccumulatedAmount,omitempty"`
	CurrentAmount        float64  `protobuf:"fixed64,18,opt,name=CurrentAmount,proto3" json:"CurrentAmount,omitempty"`
	PaymentLinkNumber    string   `protobuf:"bytes,19,opt,name=PaymentLinkNumber,proto3" json:"PaymentLinkNumber,omitempty"`
}

func (x *VASingleUseResponse) Reset() {
	*x = VASingleUseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banking_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VASingleUseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VASingleUseResponse) ProtoMessage() {}

func (x *VASingleUseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banking_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VASingleUseResponse.ProtoReflect.Descriptor instead.
func (*VASingleUseResponse) Descriptor() ([]byte, []int) {
	return file_banking_proto_rawDescGZIP(), []int{13}
}

func (x *VASingleUseResponse) GetStatus() *PStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *VASingleUseResponse) GetTenantCode() string {
	if x != nil {
		return x.TenantCode
	}
	return ""
}

func (x *VASingleUseResponse) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *VASingleUseResponse) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *VASingleUseResponse) GetLinkingAccountNumber() string {
	if x != nil {
		return x.LinkingAccountNumber
	}
	return ""
}

func (x *VASingleUseResponse) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *VASingleUseResponse) GetAccountType() string {
	if x != nil {
		return x.AccountType
	}
	return ""
}

func (x *VASingleUseResponse) GetCifNumber() string {
	if x != nil {
		return x.CifNumber
	}
	return ""
}

func (x *VASingleUseResponse) GetSmeNumber() string {
	if x != nil {
		return x.SmeNumber
	}
	return ""
}

func (x *VASingleUseResponse) GetBankAccountNumber() string {
	if x != nil {
		return x.BankAccountNumber
	}
	return ""
}

func (x *VASingleUseResponse) GetBankCode() string {
	if x != nil {
		return x.BankCode
	}
	return ""
}

func (x *VASingleUseResponse) GetPaymentLinkId() int64 {
	if x != nil {
		return x.PaymentLinkId
	}
	return 0
}

func (x *VASingleUseResponse) GetMasterAccountNumber() string {
	if x != nil {
		return x.MasterAccountNumber
	}
	return ""
}

func (x *VASingleUseResponse) GetExpiryDate() string {
	if x != nil {
		return x.ExpiryDate
	}
	return ""
}

func (x *VASingleUseResponse) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *VASingleUseResponse) GetExpectingAmount() float64 {
	if x != nil {
		return x.ExpectingAmount
	}
	return 0
}

func (x *VASingleUseResponse) GetAccumulatedAmount() float64 {
	if x != nil {
		return x.AccumulatedAmount
	}
	return 0
}

func (x *VASingleUseResponse) GetCurrentAmount() float64 {
	if x != nil {
		return x.CurrentAmount
	}
	return 0
}

func (x *VASingleUseResponse) GetPaymentLinkNumber() string {
	if x != nil {
		return x.PaymentLinkNumber
	}
	return ""
}

var File_banking_proto protoreflect.FileDescriptor

var file_banking_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x02, 0x0a, 0x0f, 0x56, 0x41, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x61, 0x6e, 0x6b,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72,
	0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xce, 0x09, 0x0a, 0x16, 0x56, 0x41,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x1c,
	0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x1c, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x46, 0x0a, 0x1e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x69,
	0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c,
	0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x48,
	0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19,
	0x49, 0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x50, 0x65, 0x72,
	0x44, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x19, 0x49, 0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x50, 0x65,
	0x72, 0x44, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x41, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x50, 0x65, 0x72, 0x44,
	0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a,
	0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x50, 0x65,
	0x72, 0x44, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x43, 0x61,
	0x73, 0x68, 0x49, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x43, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e,
	0x0a, 0x1a, 0x49, 0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74,
	0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1a, 0x49, 0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x61, 0x73, 0x68, 0x4f,
	0x75, 0x74, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40,
	0x0a, 0x1b, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x75,
	0x74, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x1b, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73,
	0x68, 0x4f, 0x75, 0x74, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x44, 0x0a, 0x0f, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x4c, 0x61,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x49, 0x73, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x50, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x49, 0x73, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x50, 0x65, 0x72, 0x57, 0x65,
	0x65, 0x6b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x50, 0x65, 0x72, 0x57, 0x65,
	0x65, 0x6b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c,
	0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x50,
	0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x13,
	0x43, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x4c, 0x61,
	0x73, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x41, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x1c, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48,
	0x0a, 0x1f, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1f, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x22, 0xe2, 0x09, 0x0a, 0x10, 0x56,
	0x41, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x50, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x42, 0x61, 0x6e,
	0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x69, 0x66,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x69,
	0x66, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6d, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x6d, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x6f,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x14, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x61, 0x73, 0x68, 0x49,
	0x6e, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x43, 0x61, 0x73, 0x68, 0x49, 0x6e, 0x50, 0x65, 0x72, 0x44, 0x61,
	0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x43, 0x61, 0x73, 0x68, 0x49,
	0x6e, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x43, 0x61, 0x73,
	0x68, 0x49, 0x6e, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x43,
	0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x75,
	0x74, 0x50, 0x65, 0x72, 0x44, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a,
	0x0f, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0f, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x50, 0x65,
	0x72, 0x57, 0x65, 0x65, 0x6b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x14, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x50, 0x65, 0x72, 0x57, 0x65, 0x65,
	0x6b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x13, 0x43, 0x61, 0x73, 0x68, 0x4f,
	0x75, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x44, 0x61, 0x74, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x13, 0x43, 0x61, 0x73, 0x68, 0x4f, 0x75, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x65, 0x65,
	0x6b, 0x44, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x14, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x50, 0x61, 0x79,
	0x52, 0x65, 0x63, 0x76, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x50, 0x61, 0x79, 0x52, 0x65, 0x63, 0x76,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xb1, 0x02, 0x0a, 0x1b, 0x50, 0x61, 0x79, 0x52, 0x65, 0x63, 0x76, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x15, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x50, 0x61, 0x79, 0x52, 0x65, 0x63, 0x76,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x50, 0x61, 0x79, 0x52, 0x65, 0x63, 0x76, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x6e,
	0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x61, 0x6e,
	0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x40, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x74, 0x22, 0x76, 0x0a, 0x1c, 0x50, 0x61, 0x79, 0x52, 0x65, 0x63, 0x76, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x50, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x78, 0x0a, 0x10, 0x43,
	0x69, 0x66, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x69, 0x66, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x43, 0x69, 0x66, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a,
	0x0e, 0x43, 0x69, 0x66, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x69, 0x66, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x93, 0x0d, 0x0a, 0x11, 0x43, 0x69, 0x66, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x50, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x69, 0x66, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x69, 0x66, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x69, 0x66, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x69,
	0x66, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x11, 0x43, 0x69, 0x66, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x69, 0x66, 0x50, 0x61, 0x73,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0a, 0x43,
	0x69, 0x66, 0x42, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x43, 0x69, 0x66,
	0x42, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x69, 0x66, 0x4c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x69,
	0x66, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x69, 0x66,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x43, 0x69, 0x66, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x43, 0x69, 0x66, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x69, 0x66, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x69, 0x66, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x69, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x43, 0x69, 0x66, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x43, 0x69, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x43,
	0x69, 0x66, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x43, 0x69, 0x66, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x43, 0x69, 0x66,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x43, 0x69, 0x66, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x69, 0x66, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x69, 0x66,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x69, 0x66, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x69, 0x66, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x69, 0x66, 0x47, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x69, 0x66, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x69, 0x66, 0x4e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43,
	0x69, 0x66, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a,
	0x17, 0x43, 0x69, 0x66, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x69, 0x74,
	0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x43, 0x69, 0x66, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x69, 0x74, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x43, 0x69, 0x66, 0x50, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x43, 0x69,
	0x66, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x19, 0x43, 0x69, 0x66,
	0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x43, 0x69,
	0x66, 0x50, 0x65, 0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x69, 0x66, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x69, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x43, 0x69, 0x66, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x43, 0x69, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x3e, 0x0a, 0x1a, 0x43, 0x69, 0x66, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1a, 0x43, 0x69, 0x66, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x3a, 0x0a, 0x18, 0x43, 0x69, 0x66, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x43, 0x69, 0x66, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x43,
	0x69, 0x66, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x69, 0x66, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x17, 0x43, 0x69, 0x66,
	0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x43, 0x69, 0x66, 0x49,
	0x64, 0x43, 0x61, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x4e, 0x0a, 0x14, 0x43, 0x69, 0x66, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x49, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x43,
	0x69, 0x66, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x49, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x43, 0x69, 0x66, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x43, 0x69,
	0x66, 0x49, 0x64, 0x43, 0x61, 0x72, 0x64, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x3c, 0x0a, 0x19, 0x43, 0x69, 0x66, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x43, 0x69, 0x66, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x52, 0x0a, 0x16, 0x43, 0x69, 0x66, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x73,
	0x73, 0x75, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x43, 0x69, 0x66,
	0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x73, 0x73, 0x75, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x43, 0x69, 0x66, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15,
	0x43, 0x69, 0x66, 0x50, 0x61, 0x73, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x69, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x69, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x69, 0x66, 0x4b, 0x79, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x43, 0x69, 0x66, 0x4b, 0x79, 0x63, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x69, 0x66, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x69, 0x66, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x2a, 0x0a, 0x10, 0x43, 0x69, 0x66, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x69, 0x66, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf0, 0x04, 0x0a, 0x10,
	0x53, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x53, 0x6d, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x6d, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x6d, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x53, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6d,
	0x65, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x53, 0x6d, 0x65, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x6d,
	0x65, 0x54, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x53, 0x6d, 0x65, 0x54, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x6d, 0x65, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x53, 0x6d, 0x65, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x6d, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x6d, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x26,
	0x0a, 0x0e, 0x53, 0x6d, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x6d, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x15, 0x53, 0x6d, 0x65, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x43, 0x69, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x53, 0x6d, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x43, 0x69, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x19,
	0x53, 0x6d, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x19, 0x53, 0x6d, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x53, 0x6d,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x53, 0x6d, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x53, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x53, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x69, 0x66, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x69, 0x66, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x50,
	0x0a, 0x10, 0x53, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0xed, 0x05, 0x0a, 0x11, 0x53, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x2e, 0x50, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x0f, 0x53, 0x6d, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x53, 0x6d, 0x65, 0x4f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x6d, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x53, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x6d, 0x65, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x53, 0x6d, 0x65, 0x54, 0x61, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x53, 0x6d, 0x65, 0x54, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x6d, 0x65, 0x54, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x6d, 0x65, 0x45, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x53, 0x6d, 0x65, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x6d, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x6d, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x26, 0x0a, 0x0e, 0x53, 0x6d, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x6d, 0x65, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x15, 0x53, 0x6d, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x69, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x53, 0x6d, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x69, 0x74, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3c,
	0x0a, 0x19, 0x53, 0x6d, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x19, 0x53, 0x6d, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x17,
	0x53, 0x6d, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x53,
	0x6d, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x53, 0x6d, 0x65, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x53, 0x6d, 0x65, 0x41, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x6d, 0x65, 0x4b, 0x79, 0x63, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x53, 0x6d, 0x65, 0x4b, 0x79, 0x63,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x6d, 0x65, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x53, 0x6d, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x69, 0x66, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x69, 0x66, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0x86, 0x03, 0x0a, 0x1a, 0x56, 0x41, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6e,
	0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x4c, 0x69, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x64, 0x22, 0xba, 0x03, 0x0a, 0x18, 0x56, 0x41,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x15, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x22, 0xe3, 0x01, 0x0a, 0x19, 0x56, 0x41, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xe7, 0x05, 0x0a,
	0x13, 0x56, 0x41, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x50,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x4c, 0x69, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x69, 0x66, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x69, 0x66, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x53, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x53, 0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11,
	0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61,
	0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x61,
	0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x11, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x32, 0x82, 0x07, 0x0a, 0x07, 0x42, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72,
	0x79, 0x12, 0x15, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x50, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x2e, 0x50, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x47, 0x0a, 0x14, 0x4e, 0x61, 0x70, 0x61, 0x73, 0x42, 0x61, 0x6e, 0x6b, 0x43,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x12, 0x15, 0x2e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x2e, 0x50, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x50, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0f, 0x56,
	0x41, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x12, 0x18,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x56, 0x41, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x2e, 0x56, 0x41, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0f, 0x56, 0x41, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x2e, 0x56, 0x41, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x2e, 0x56, 0x41, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x14, 0x50, 0x61, 0x79, 0x52, 0x65, 0x63,
	0x76, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x24,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x52, 0x65, 0x63, 0x76,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x50,
	0x61, 0x79, 0x52, 0x65, 0x63, 0x76, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a,
	0x10, 0x43, 0x69, 0x66, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72,
	0x79, 0x12, 0x19, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x69, 0x66, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x43, 0x69, 0x66, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x10, 0x53, 0x6d,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x12, 0x19,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x53, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x2e, 0x53, 0x6d, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x6d, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x53,
	0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x53, 0x6d, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a,
	0x13, 0x56, 0x41, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x56,
	0x41, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x2e, 0x56, 0x41, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x11, 0x56, 0x41, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21,
	0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x56, 0x41, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x55, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x56, 0x41, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x58, 0x0a, 0x12, 0x56, 0x41, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65,
	0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x12, 0x22, 0x2e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x2e, 0x56, 0x41, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x49, 0x6e, 0x71,
	0x75, 0x69, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x56, 0x41, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0b, 0x5a, 0x09, 0x2e,
	0x2f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_banking_proto_rawDescOnce sync.Once
	file_banking_proto_rawDescData = file_banking_proto_rawDesc
)

func file_banking_proto_rawDescGZIP() []byte {
	file_banking_proto_rawDescOnce.Do(func() {
		file_banking_proto_rawDescData = protoimpl.X.CompressGZIP(file_banking_proto_rawDescData)
	})
	return file_banking_proto_rawDescData
}

var file_banking_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_banking_proto_goTypes = []interface{}{
	(*VADetailRequest)(nil),              // 0: packets.VADetailRequest
	(*VABalanceUpdateRequest)(nil),       // 1: packets.VABalanceUpdateRequest
	(*VADetailResponse)(nil),             // 2: packets.VADetailResponse
	(*PayRecvAccountNotifyRequest)(nil),  // 3: packets.PayRecvAccountNotifyRequest
	(*PayRecvAccountNotifyResponse)(nil), // 4: packets.PayRecvAccountNotifyResponse
	(*CifDetailRequest)(nil),             // 5: packets.CifDetailRequest
	(*CifDetailResponse)(nil),            // 6: packets.CifDetailResponse
	(*SmeCreateRequest)(nil),             // 7: packets.SmeCreateRequest
	(*SmeDetailRequest)(nil),             // 8: packets.SmeDetailRequest
	(*SmeDetailResponse)(nil),            // 9: packets.SmeDetailResponse
	(*VASingleUseRegisterRequest)(nil),   // 10: packets.VASingleUseRegisterRequest
	(*VASingleUseUpdateRequest)(nil),     // 11: packets.VASingleUseUpdateRequest
	(*VASingleUseInquiryRequest)(nil),    // 12: packets.VASingleUseInquiryRequest
	(*VASingleUseResponse)(nil),          // 13: packets.VASingleUseResponse
	(*timestamppb.Timestamp)(nil),        // 14: google.protobuf.Timestamp
	(*PStatus)(nil),                      // 15: packets.PStatus
	(*PViewRequest)(nil),                 // 16: packets.PViewRequest
	(*PViewResponse)(nil),                // 17: packets.PViewResponse
}
var file_banking_proto_depIdxs = []int32{
	14, // 0: packets.VABalanceUpdateRequest.CashInLastDate:type_name -> google.protobuf.Timestamp
	14, // 1: packets.VABalanceUpdateRequest.CashOutLastDate:type_name -> google.protobuf.Timestamp
	14, // 2: packets.VABalanceUpdateRequest.CashOutLastWeekDate:type_name -> google.protobuf.Timestamp
	14, // 3: packets.VABalanceUpdateRequest.TransactionAt:type_name -> google.protobuf.Timestamp
	15, // 4: packets.VADetailResponse.Status:type_name -> packets.PStatus
	14, // 5: packets.VADetailResponse.CashInLastDate:type_name -> google.protobuf.Timestamp
	14, // 6: packets.VADetailResponse.CashOutLastDate:type_name -> google.protobuf.Timestamp
	14, // 7: packets.VADetailResponse.CashOutLastWeekDate:type_name -> google.protobuf.Timestamp
	14, // 8: packets.PayRecvAccountNotifyRequest.TransactionAt:type_name -> google.protobuf.Timestamp
	15, // 9: packets.PayRecvAccountNotifyResponse.Status:type_name -> packets.PStatus
	15, // 10: packets.CifDetailResponse.Status:type_name -> packets.PStatus
	14, // 11: packets.CifDetailResponse.CifBodDate:type_name -> google.protobuf.Timestamp
	14, // 12: packets.CifDetailResponse.CifIdCardIssuingDate:type_name -> google.protobuf.Timestamp
	14, // 13: packets.CifDetailResponse.CifIdCardExpiryDate:type_name -> google.protobuf.Timestamp
	14, // 14: packets.CifDetailResponse.CifPassportIssuingDate:type_name -> google.protobuf.Timestamp
	14, // 15: packets.CifDetailResponse.CifPassportExpiryDate:type_name -> google.protobuf.Timestamp
	15, // 16: packets.SmeDetailResponse.Status:type_name -> packets.PStatus
	14, // 17: packets.VASingleUseUpdateRequest.TransactionAt:type_name -> google.protobuf.Timestamp
	15, // 18: packets.VASingleUseResponse.Status:type_name -> packets.PStatus
	16, // 19: packets.Banking.BankInquiry:input_type -> packets.PViewRequest
	16, // 20: packets.Banking.NapasBankCodeInquiry:input_type -> packets.PViewRequest
	0,  // 21: packets.Banking.VADetailInquiry:input_type -> packets.VADetailRequest
	1,  // 22: packets.Banking.VABalanceUpdate:input_type -> packets.VABalanceUpdateRequest
	3,  // 23: packets.Banking.PayRecvAccountNotify:input_type -> packets.PayRecvAccountNotifyRequest
	5,  // 24: packets.Banking.CifDetailInquiry:input_type -> packets.CifDetailRequest
	8,  // 25: packets.Banking.SmeDetailInquiry:input_type -> packets.SmeDetailRequest
	7,  // 26: packets.Banking.SmeCreate:input_type -> packets.SmeCreateRequest
	10, // 27: packets.Banking.VASingleUseRegister:input_type -> packets.VASingleUseRegisterRequest
	11, // 28: packets.Banking.VASingleUseUpdate:input_type -> packets.VASingleUseUpdateRequest
	12, // 29: packets.Banking.VASingleUseInquiry:input_type -> packets.VASingleUseInquiryRequest
	17, // 30: packets.Banking.BankInquiry:output_type -> packets.PViewResponse
	17, // 31: packets.Banking.NapasBankCodeInquiry:output_type -> packets.PViewResponse
	2,  // 32: packets.Banking.VADetailInquiry:output_type -> packets.VADetailResponse
	2,  // 33: packets.Banking.VABalanceUpdate:output_type -> packets.VADetailResponse
	4,  // 34: packets.Banking.PayRecvAccountNotify:output_type -> packets.PayRecvAccountNotifyResponse
	6,  // 35: packets.Banking.CifDetailInquiry:output_type -> packets.CifDetailResponse
	9,  // 36: packets.Banking.SmeDetailInquiry:output_type -> packets.SmeDetailResponse
	9,  // 37: packets.Banking.SmeCreate:output_type -> packets.SmeDetailResponse
	13, // 38: packets.Banking.VASingleUseRegister:output_type -> packets.VASingleUseResponse
	13, // 39: packets.Banking.VASingleUseUpdate:output_type -> packets.VASingleUseResponse
	13, // 40: packets.Banking.VASingleUseInquiry:output_type -> packets.VASingleUseResponse
	30, // [30:41] is the sub-list for method output_type
	19, // [19:30] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_banking_proto_init() }
func file_banking_proto_init() {
	if File_banking_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_banking_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VADetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VABalanceUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VADetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayRecvAccountNotifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayRecvAccountNotifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CifDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CifDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmeCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmeDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmeDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VASingleUseRegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VASingleUseUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VASingleUseInquiryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banking_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VASingleUseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_banking_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_banking_proto_goTypes,
		DependencyIndexes: file_banking_proto_depIdxs,
		MessageInfos:      file_banking_proto_msgTypes,
	}.Build()
	File_banking_proto = out.File
	file_banking_proto_rawDesc = nil
	file_banking_proto_goTypes = nil
	file_banking_proto_depIdxs = nil
}
