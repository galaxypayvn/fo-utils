// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: banking.proto

package packets

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BankingClient is the client API for Banking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankingClient interface {
	BankInquiry(ctx context.Context, in *PViewRequest, opts ...grpc.CallOption) (*PViewResponse, error)
	NapasBankCodeInquiry(ctx context.Context, in *PViewRequest, opts ...grpc.CallOption) (*PViewResponse, error)
	VADetailInquiry(ctx context.Context, in *VADetailRequest, opts ...grpc.CallOption) (*VADetailResponse, error)
	VABalanceUpdate(ctx context.Context, in *VABalanceUpdateRequest, opts ...grpc.CallOption) (*VADetailResponse, error)
	PayRecvAccountNotify(ctx context.Context, in *PayRecvAccountNotifyRequest, opts ...grpc.CallOption) (*PayRecvAccountNotifyResponse, error)
	CifDetailInquiry(ctx context.Context, in *CifDetailRequest, opts ...grpc.CallOption) (*CifDetailResponse, error)
	SmeDetailInquiry(ctx context.Context, in *SmeDetailRequest, opts ...grpc.CallOption) (*SmeDetailResponse, error)
	SmeCreate(ctx context.Context, in *SmeCreateRequest, opts ...grpc.CallOption) (*SmeDetailResponse, error)
	VASingleUseRegister(ctx context.Context, in *VASingleUseRegisterRequest, opts ...grpc.CallOption) (*VASingleUseResponse, error)
	VASingleUseUpdate(ctx context.Context, in *VASingleUseUpdateRequest, opts ...grpc.CallOption) (*VASingleUseResponse, error)
	VASingleUseInquiry(ctx context.Context, in *VASingleUseInquiryRequest, opts ...grpc.CallOption) (*VASingleUseResponse, error)
}

type bankingClient struct {
	cc grpc.ClientConnInterface
}

func NewBankingClient(cc grpc.ClientConnInterface) BankingClient {
	return &bankingClient{cc}
}

func (c *bankingClient) BankInquiry(ctx context.Context, in *PViewRequest, opts ...grpc.CallOption) (*PViewResponse, error) {
	out := new(PViewResponse)
	err := c.cc.Invoke(ctx, "/packets.Banking/BankInquiry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingClient) NapasBankCodeInquiry(ctx context.Context, in *PViewRequest, opts ...grpc.CallOption) (*PViewResponse, error) {
	out := new(PViewResponse)
	err := c.cc.Invoke(ctx, "/packets.Banking/NapasBankCodeInquiry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingClient) VADetailInquiry(ctx context.Context, in *VADetailRequest, opts ...grpc.CallOption) (*VADetailResponse, error) {
	out := new(VADetailResponse)
	err := c.cc.Invoke(ctx, "/packets.Banking/VADetailInquiry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingClient) VABalanceUpdate(ctx context.Context, in *VABalanceUpdateRequest, opts ...grpc.CallOption) (*VADetailResponse, error) {
	out := new(VADetailResponse)
	err := c.cc.Invoke(ctx, "/packets.Banking/VABalanceUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingClient) PayRecvAccountNotify(ctx context.Context, in *PayRecvAccountNotifyRequest, opts ...grpc.CallOption) (*PayRecvAccountNotifyResponse, error) {
	out := new(PayRecvAccountNotifyResponse)
	err := c.cc.Invoke(ctx, "/packets.Banking/PayRecvAccountNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingClient) CifDetailInquiry(ctx context.Context, in *CifDetailRequest, opts ...grpc.CallOption) (*CifDetailResponse, error) {
	out := new(CifDetailResponse)
	err := c.cc.Invoke(ctx, "/packets.Banking/CifDetailInquiry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingClient) SmeDetailInquiry(ctx context.Context, in *SmeDetailRequest, opts ...grpc.CallOption) (*SmeDetailResponse, error) {
	out := new(SmeDetailResponse)
	err := c.cc.Invoke(ctx, "/packets.Banking/SmeDetailInquiry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingClient) SmeCreate(ctx context.Context, in *SmeCreateRequest, opts ...grpc.CallOption) (*SmeDetailResponse, error) {
	out := new(SmeDetailResponse)
	err := c.cc.Invoke(ctx, "/packets.Banking/SmeCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingClient) VASingleUseRegister(ctx context.Context, in *VASingleUseRegisterRequest, opts ...grpc.CallOption) (*VASingleUseResponse, error) {
	out := new(VASingleUseResponse)
	err := c.cc.Invoke(ctx, "/packets.Banking/VASingleUseRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingClient) VASingleUseUpdate(ctx context.Context, in *VASingleUseUpdateRequest, opts ...grpc.CallOption) (*VASingleUseResponse, error) {
	out := new(VASingleUseResponse)
	err := c.cc.Invoke(ctx, "/packets.Banking/VASingleUseUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankingClient) VASingleUseInquiry(ctx context.Context, in *VASingleUseInquiryRequest, opts ...grpc.CallOption) (*VASingleUseResponse, error) {
	out := new(VASingleUseResponse)
	err := c.cc.Invoke(ctx, "/packets.Banking/VASingleUseInquiry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankingServer is the server API for Banking service.
// All implementations should embed UnimplementedBankingServer
// for forward compatibility
type BankingServer interface {
	BankInquiry(context.Context, *PViewRequest) (*PViewResponse, error)
	NapasBankCodeInquiry(context.Context, *PViewRequest) (*PViewResponse, error)
	VADetailInquiry(context.Context, *VADetailRequest) (*VADetailResponse, error)
	VABalanceUpdate(context.Context, *VABalanceUpdateRequest) (*VADetailResponse, error)
	PayRecvAccountNotify(context.Context, *PayRecvAccountNotifyRequest) (*PayRecvAccountNotifyResponse, error)
	CifDetailInquiry(context.Context, *CifDetailRequest) (*CifDetailResponse, error)
	SmeDetailInquiry(context.Context, *SmeDetailRequest) (*SmeDetailResponse, error)
	SmeCreate(context.Context, *SmeCreateRequest) (*SmeDetailResponse, error)
	VASingleUseRegister(context.Context, *VASingleUseRegisterRequest) (*VASingleUseResponse, error)
	VASingleUseUpdate(context.Context, *VASingleUseUpdateRequest) (*VASingleUseResponse, error)
	VASingleUseInquiry(context.Context, *VASingleUseInquiryRequest) (*VASingleUseResponse, error)
}

// UnimplementedBankingServer should be embedded to have forward compatible implementations.
type UnimplementedBankingServer struct {
}

func (UnimplementedBankingServer) BankInquiry(context.Context, *PViewRequest) (*PViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BankInquiry not implemented")
}
func (UnimplementedBankingServer) NapasBankCodeInquiry(context.Context, *PViewRequest) (*PViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NapasBankCodeInquiry not implemented")
}
func (UnimplementedBankingServer) VADetailInquiry(context.Context, *VADetailRequest) (*VADetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VADetailInquiry not implemented")
}
func (UnimplementedBankingServer) VABalanceUpdate(context.Context, *VABalanceUpdateRequest) (*VADetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VABalanceUpdate not implemented")
}
func (UnimplementedBankingServer) PayRecvAccountNotify(context.Context, *PayRecvAccountNotifyRequest) (*PayRecvAccountNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayRecvAccountNotify not implemented")
}
func (UnimplementedBankingServer) CifDetailInquiry(context.Context, *CifDetailRequest) (*CifDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CifDetailInquiry not implemented")
}
func (UnimplementedBankingServer) SmeDetailInquiry(context.Context, *SmeDetailRequest) (*SmeDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmeDetailInquiry not implemented")
}
func (UnimplementedBankingServer) SmeCreate(context.Context, *SmeCreateRequest) (*SmeDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SmeCreate not implemented")
}
func (UnimplementedBankingServer) VASingleUseRegister(context.Context, *VASingleUseRegisterRequest) (*VASingleUseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VASingleUseRegister not implemented")
}
func (UnimplementedBankingServer) VASingleUseUpdate(context.Context, *VASingleUseUpdateRequest) (*VASingleUseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VASingleUseUpdate not implemented")
}
func (UnimplementedBankingServer) VASingleUseInquiry(context.Context, *VASingleUseInquiryRequest) (*VASingleUseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VASingleUseInquiry not implemented")
}

// UnsafeBankingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankingServer will
// result in compilation errors.
type UnsafeBankingServer interface {
	mustEmbedUnimplementedBankingServer()
}

func RegisterBankingServer(s grpc.ServiceRegistrar, srv BankingServer) {
	s.RegisterService(&Banking_ServiceDesc, srv)
}

func _Banking_BankInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServer).BankInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Banking/BankInquiry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServer).BankInquiry(ctx, req.(*PViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banking_NapasBankCodeInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServer).NapasBankCodeInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Banking/NapasBankCodeInquiry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServer).NapasBankCodeInquiry(ctx, req.(*PViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banking_VADetailInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VADetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServer).VADetailInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Banking/VADetailInquiry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServer).VADetailInquiry(ctx, req.(*VADetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banking_VABalanceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VABalanceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServer).VABalanceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Banking/VABalanceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServer).VABalanceUpdate(ctx, req.(*VABalanceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banking_PayRecvAccountNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRecvAccountNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServer).PayRecvAccountNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Banking/PayRecvAccountNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServer).PayRecvAccountNotify(ctx, req.(*PayRecvAccountNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banking_CifDetailInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CifDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServer).CifDetailInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Banking/CifDetailInquiry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServer).CifDetailInquiry(ctx, req.(*CifDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banking_SmeDetailInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmeDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServer).SmeDetailInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Banking/SmeDetailInquiry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServer).SmeDetailInquiry(ctx, req.(*SmeDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banking_SmeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmeCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServer).SmeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Banking/SmeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServer).SmeCreate(ctx, req.(*SmeCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banking_VASingleUseRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VASingleUseRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServer).VASingleUseRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Banking/VASingleUseRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServer).VASingleUseRegister(ctx, req.(*VASingleUseRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banking_VASingleUseUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VASingleUseUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServer).VASingleUseUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Banking/VASingleUseUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServer).VASingleUseUpdate(ctx, req.(*VASingleUseUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Banking_VASingleUseInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VASingleUseInquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankingServer).VASingleUseInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Banking/VASingleUseInquiry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankingServer).VASingleUseInquiry(ctx, req.(*VASingleUseInquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Banking_ServiceDesc is the grpc.ServiceDesc for Banking service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Banking_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "packets.Banking",
	HandlerType: (*BankingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BankInquiry",
			Handler:    _Banking_BankInquiry_Handler,
		},
		{
			MethodName: "NapasBankCodeInquiry",
			Handler:    _Banking_NapasBankCodeInquiry_Handler,
		},
		{
			MethodName: "VADetailInquiry",
			Handler:    _Banking_VADetailInquiry_Handler,
		},
		{
			MethodName: "VABalanceUpdate",
			Handler:    _Banking_VABalanceUpdate_Handler,
		},
		{
			MethodName: "PayRecvAccountNotify",
			Handler:    _Banking_PayRecvAccountNotify_Handler,
		},
		{
			MethodName: "CifDetailInquiry",
			Handler:    _Banking_CifDetailInquiry_Handler,
		},
		{
			MethodName: "SmeDetailInquiry",
			Handler:    _Banking_SmeDetailInquiry_Handler,
		},
		{
			MethodName: "SmeCreate",
			Handler:    _Banking_SmeCreate_Handler,
		},
		{
			MethodName: "VASingleUseRegister",
			Handler:    _Banking_VASingleUseRegister_Handler,
		},
		{
			MethodName: "VASingleUseUpdate",
			Handler:    _Banking_VASingleUseUpdate_Handler,
		},
		{
			MethodName: "VASingleUseInquiry",
			Handler:    _Banking_VASingleUseInquiry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "banking.proto",
}
