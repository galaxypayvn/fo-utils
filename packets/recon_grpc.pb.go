// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: recon.proto

package packets

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReconClient is the client API for Recon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReconClient interface {
	BankReconRegister(ctx context.Context, in *BankReconRegisterRequest, opts ...grpc.CallOption) (*BankReconRegisterResponse, error)
	BankReconModify(ctx context.Context, in *BankReconModifyRequest, opts ...grpc.CallOption) (*BankReconModifyResponse, error)
	ProviderReconRegister(ctx context.Context, in *ProviderReconRegisterRequest, opts ...grpc.CallOption) (*ProviderReconRegisterResponse, error)
}

type reconClient struct {
	cc grpc.ClientConnInterface
}

func NewReconClient(cc grpc.ClientConnInterface) ReconClient {
	return &reconClient{cc}
}

func (c *reconClient) BankReconRegister(ctx context.Context, in *BankReconRegisterRequest, opts ...grpc.CallOption) (*BankReconRegisterResponse, error) {
	out := new(BankReconRegisterResponse)
	err := c.cc.Invoke(ctx, "/packets.Recon/BankReconRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reconClient) BankReconModify(ctx context.Context, in *BankReconModifyRequest, opts ...grpc.CallOption) (*BankReconModifyResponse, error) {
	out := new(BankReconModifyResponse)
	err := c.cc.Invoke(ctx, "/packets.Recon/BankReconModify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reconClient) ProviderReconRegister(ctx context.Context, in *ProviderReconRegisterRequest, opts ...grpc.CallOption) (*ProviderReconRegisterResponse, error) {
	out := new(ProviderReconRegisterResponse)
	err := c.cc.Invoke(ctx, "/packets.Recon/ProviderReconRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReconServer is the server API for Recon service.
// All implementations should embed UnimplementedReconServer
// for forward compatibility
type ReconServer interface {
	BankReconRegister(context.Context, *BankReconRegisterRequest) (*BankReconRegisterResponse, error)
	BankReconModify(context.Context, *BankReconModifyRequest) (*BankReconModifyResponse, error)
	ProviderReconRegister(context.Context, *ProviderReconRegisterRequest) (*ProviderReconRegisterResponse, error)
}

// UnimplementedReconServer should be embedded to have forward compatible implementations.
type UnimplementedReconServer struct {
}

func (UnimplementedReconServer) BankReconRegister(context.Context, *BankReconRegisterRequest) (*BankReconRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BankReconRegister not implemented")
}
func (UnimplementedReconServer) BankReconModify(context.Context, *BankReconModifyRequest) (*BankReconModifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BankReconModify not implemented")
}
func (UnimplementedReconServer) ProviderReconRegister(context.Context, *ProviderReconRegisterRequest) (*ProviderReconRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderReconRegister not implemented")
}

// UnsafeReconServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReconServer will
// result in compilation errors.
type UnsafeReconServer interface {
	mustEmbedUnimplementedReconServer()
}

func RegisterReconServer(s grpc.ServiceRegistrar, srv ReconServer) {
	s.RegisterService(&Recon_ServiceDesc, srv)
}

func _Recon_BankReconRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankReconRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReconServer).BankReconRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Recon/BankReconRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReconServer).BankReconRegister(ctx, req.(*BankReconRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recon_BankReconModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankReconModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReconServer).BankReconModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Recon/BankReconModify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReconServer).BankReconModify(ctx, req.(*BankReconModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recon_ProviderReconRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProviderReconRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReconServer).ProviderReconRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/packets.Recon/ProviderReconRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReconServer).ProviderReconRegister(ctx, req.(*ProviderReconRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Recon_ServiceDesc is the grpc.ServiceDesc for Recon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Recon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "packets.Recon",
	HandlerType: (*ReconServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BankReconRegister",
			Handler:    _Recon_BankReconRegister_Handler,
		},
		{
			MethodName: "BankReconModify",
			Handler:    _Recon_BankReconModify_Handler,
		},
		{
			MethodName: "ProviderReconRegister",
			Handler:    _Recon_ProviderReconRegister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recon.proto",
}
